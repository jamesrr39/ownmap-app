// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ownmapdal/ownmapdb/ownmapdb.proto

package ownmapdb

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	ownmap "github.com/jamesrr39/ownmap-app/ownmap"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Header struct {
	Version                  uint64              `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	DatasetInfo              *ownmap.DatasetInfo `protobuf:"bytes,2,opt,name=dataset_info,json=datasetInfo,proto3" json:"datasetInfo"`
	NodesSectionMetadata     *SectionMetadata    `protobuf:"bytes,3,opt,name=nodes_section_metadata,json=nodesSectionMetadata,proto3" json:"nodesSectionMetadata"`
	WaysSectionMetadata      *SectionMetadata    `protobuf:"bytes,4,opt,name=ways_section_metadata,json=waysSectionMetadata,proto3" json:"waysSectionMetadata"`
	TagIndexSectionMetadata  *SectionMetadata    `protobuf:"bytes,5,opt,name=tag_index_section_metadata,json=tagIndexSectionMetadata,proto3" json:"tagIndexSectionMetadata"`
	RelationsSectionMetadata *SectionMetadata    `protobuf:"bytes,6,opt,name=relations_section_metadata,json=relationsSectionMetadata,proto3" json:"relationsSectionMetadata"`
}

func (m *Header) Reset()      { *m = Header{} }
func (*Header) ProtoMessage() {}
func (*Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0ef28933df090f2, []int{0}
}
func (m *Header) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Header.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Header.Merge(m, src)
}
func (m *Header) XXX_Size() int {
	return m.Size()
}
func (m *Header) XXX_DiscardUnknown() {
	xxx_messageInfo_Header.DiscardUnknown(m)
}

var xxx_messageInfo_Header proto.InternalMessageInfo

func (m *Header) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Header) GetDatasetInfo() *ownmap.DatasetInfo {
	if m != nil {
		return m.DatasetInfo
	}
	return nil
}

func (m *Header) GetNodesSectionMetadata() *SectionMetadata {
	if m != nil {
		return m.NodesSectionMetadata
	}
	return nil
}

func (m *Header) GetWaysSectionMetadata() *SectionMetadata {
	if m != nil {
		return m.WaysSectionMetadata
	}
	return nil
}

func (m *Header) GetTagIndexSectionMetadata() *SectionMetadata {
	if m != nil {
		return m.TagIndexSectionMetadata
	}
	return nil
}

func (m *Header) GetRelationsSectionMetadata() *SectionMetadata {
	if m != nil {
		return m.RelationsSectionMetadata
	}
	return nil
}

type BlockMetadata struct {
	StartOffsetFromStartOfSectionData int64  `protobuf:"varint,1,opt,name=start_offset_from_start_of_section_data,json=startOffsetFromStartOfSectionData,proto3" json:"startOffsetFromStartOfSectionData"`
	LastItemInBlockValue              []byte `protobuf:"bytes,2,opt,name=last_item_in_block_value,json=lastItemInBlockValue,proto3" json:"lastItemInBlockValue"`
	BlockSize                         int64  `protobuf:"varint,3,opt,name=block_size,json=blockSize,proto3" json:"blockSize"`
}

func (m *BlockMetadata) Reset()      { *m = BlockMetadata{} }
func (*BlockMetadata) ProtoMessage() {}
func (*BlockMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0ef28933df090f2, []int{1}
}
func (m *BlockMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockMetadata.Merge(m, src)
}
func (m *BlockMetadata) XXX_Size() int {
	return m.Size()
}
func (m *BlockMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_BlockMetadata proto.InternalMessageInfo

func (m *BlockMetadata) GetStartOffsetFromStartOfSectionData() int64 {
	if m != nil {
		return m.StartOffsetFromStartOfSectionData
	}
	return 0
}

func (m *BlockMetadata) GetLastItemInBlockValue() []byte {
	if m != nil {
		return m.LastItemInBlockValue
	}
	return nil
}

func (m *BlockMetadata) GetBlockSize() int64 {
	if m != nil {
		return m.BlockSize
	}
	return 0
}

type SectionMetadata struct {
	TotalSize      uint64           `protobuf:"varint,1,opt,name=total_size,json=totalSize,proto3" json:"totalSize"`
	BlockMetadatas []*BlockMetadata `protobuf:"bytes,2,rep,name=block_metadatas,json=blockMetadatas,proto3" json:"blockMetadatas"`
}

func (m *SectionMetadata) Reset()      { *m = SectionMetadata{} }
func (*SectionMetadata) ProtoMessage() {}
func (*SectionMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0ef28933df090f2, []int{2}
}
func (m *SectionMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SectionMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SectionMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SectionMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SectionMetadata.Merge(m, src)
}
func (m *SectionMetadata) XXX_Size() int {
	return m.Size()
}
func (m *SectionMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_SectionMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_SectionMetadata proto.InternalMessageInfo

func (m *SectionMetadata) GetTotalSize() uint64 {
	if m != nil {
		return m.TotalSize
	}
	return 0
}

func (m *SectionMetadata) GetBlockMetadatas() []*BlockMetadata {
	if m != nil {
		return m.BlockMetadatas
	}
	return nil
}

type NodesBlockData struct {
	Nodes []*ownmap.OSMNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (m *NodesBlockData) Reset()      { *m = NodesBlockData{} }
func (*NodesBlockData) ProtoMessage() {}
func (*NodesBlockData) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0ef28933df090f2, []int{3}
}
func (m *NodesBlockData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodesBlockData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodesBlockData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodesBlockData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodesBlockData.Merge(m, src)
}
func (m *NodesBlockData) XXX_Size() int {
	return m.Size()
}
func (m *NodesBlockData) XXX_DiscardUnknown() {
	xxx_messageInfo_NodesBlockData.DiscardUnknown(m)
}

var xxx_messageInfo_NodesBlockData proto.InternalMessageInfo

func (m *NodesBlockData) GetNodes() []*ownmap.OSMNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type WaysBlockData struct {
	Ways []*ownmap.OSMWay `protobuf:"bytes,1,rep,name=ways,proto3" json:"ways,omitempty"`
}

func (m *WaysBlockData) Reset()      { *m = WaysBlockData{} }
func (*WaysBlockData) ProtoMessage() {}
func (*WaysBlockData) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0ef28933df090f2, []int{4}
}
func (m *WaysBlockData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WaysBlockData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WaysBlockData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WaysBlockData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaysBlockData.Merge(m, src)
}
func (m *WaysBlockData) XXX_Size() int {
	return m.Size()
}
func (m *WaysBlockData) XXX_DiscardUnknown() {
	xxx_messageInfo_WaysBlockData.DiscardUnknown(m)
}

var xxx_messageInfo_WaysBlockData proto.InternalMessageInfo

func (m *WaysBlockData) GetWays() []*ownmap.OSMWay {
	if m != nil {
		return m.Ways
	}
	return nil
}

type RelationsBlockData struct {
	Relations []*ownmap.OSMRelation `protobuf:"bytes,1,rep,name=relations,proto3" json:"relations,omitempty"`
}

func (m *RelationsBlockData) Reset()      { *m = RelationsBlockData{} }
func (*RelationsBlockData) ProtoMessage() {}
func (*RelationsBlockData) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0ef28933df090f2, []int{5}
}
func (m *RelationsBlockData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelationsBlockData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelationsBlockData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelationsBlockData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelationsBlockData.Merge(m, src)
}
func (m *RelationsBlockData) XXX_Size() int {
	return m.Size()
}
func (m *RelationsBlockData) XXX_DiscardUnknown() {
	xxx_messageInfo_RelationsBlockData.DiscardUnknown(m)
}

var xxx_messageInfo_RelationsBlockData proto.InternalMessageInfo

func (m *RelationsBlockData) GetRelations() []*ownmap.OSMRelation {
	if m != nil {
		return m.Relations
	}
	return nil
}

type TagIndexRecord struct {
	IndexKey []byte  `protobuf:"bytes,1,opt,name=index_key,json=indexKey,proto3" json:"indexKey"`
	ItemIDs  []int64 `protobuf:"varint,2,rep,packed,name=item_ids,json=itemIds,proto3" json:"itemIds"`
}

func (m *TagIndexRecord) Reset()      { *m = TagIndexRecord{} }
func (*TagIndexRecord) ProtoMessage() {}
func (*TagIndexRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0ef28933df090f2, []int{6}
}
func (m *TagIndexRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagIndexRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagIndexRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TagIndexRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagIndexRecord.Merge(m, src)
}
func (m *TagIndexRecord) XXX_Size() int {
	return m.Size()
}
func (m *TagIndexRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_TagIndexRecord.DiscardUnknown(m)
}

var xxx_messageInfo_TagIndexRecord proto.InternalMessageInfo

func (m *TagIndexRecord) GetIndexKey() []byte {
	if m != nil {
		return m.IndexKey
	}
	return nil
}

func (m *TagIndexRecord) GetItemIDs() []int64 {
	if m != nil {
		return m.ItemIDs
	}
	return nil
}

type TagIndexBlockData struct {
	TagIndexRecords []*TagIndexRecord `protobuf:"bytes,1,rep,name=tag_index_records,json=tagIndexRecords,proto3" json:"tagIndexRecords"`
}

func (m *TagIndexBlockData) Reset()      { *m = TagIndexBlockData{} }
func (*TagIndexBlockData) ProtoMessage() {}
func (*TagIndexBlockData) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0ef28933df090f2, []int{7}
}
func (m *TagIndexBlockData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagIndexBlockData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagIndexBlockData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TagIndexBlockData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagIndexBlockData.Merge(m, src)
}
func (m *TagIndexBlockData) XXX_Size() int {
	return m.Size()
}
func (m *TagIndexBlockData) XXX_DiscardUnknown() {
	xxx_messageInfo_TagIndexBlockData.DiscardUnknown(m)
}

var xxx_messageInfo_TagIndexBlockData proto.InternalMessageInfo

func (m *TagIndexBlockData) GetTagIndexRecords() []*TagIndexRecord {
	if m != nil {
		return m.TagIndexRecords
	}
	return nil
}

func init() {
	proto.RegisterType((*Header)(nil), "github.com.jamesrr39.ownmapapp.ownmapdal.ownmapdb.Header")
	proto.RegisterType((*BlockMetadata)(nil), "github.com.jamesrr39.ownmapapp.ownmapdal.ownmapdb.BlockMetadata")
	proto.RegisterType((*SectionMetadata)(nil), "github.com.jamesrr39.ownmapapp.ownmapdal.ownmapdb.SectionMetadata")
	proto.RegisterType((*NodesBlockData)(nil), "github.com.jamesrr39.ownmapapp.ownmapdal.ownmapdb.NodesBlockData")
	proto.RegisterType((*WaysBlockData)(nil), "github.com.jamesrr39.ownmapapp.ownmapdal.ownmapdb.WaysBlockData")
	proto.RegisterType((*RelationsBlockData)(nil), "github.com.jamesrr39.ownmapapp.ownmapdal.ownmapdb.RelationsBlockData")
	proto.RegisterType((*TagIndexRecord)(nil), "github.com.jamesrr39.ownmapapp.ownmapdal.ownmapdb.TagIndexRecord")
	proto.RegisterType((*TagIndexBlockData)(nil), "github.com.jamesrr39.ownmapapp.ownmapdal.ownmapdb.TagIndexBlockData")
}

func init() { proto.RegisterFile("ownmapdal/ownmapdb/ownmapdb.proto", fileDescriptor_c0ef28933df090f2) }

var fileDescriptor_c0ef28933df090f2 = []byte{
	// 833 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4b, 0x6f, 0xdb, 0x46,
	0x10, 0xd6, 0x5a, 0x8e, 0x1f, 0x6b, 0x47, 0x42, 0xa8, 0x34, 0x21, 0x74, 0x20, 0x6d, 0xa2, 0x0f,
	0x9f, 0xe8, 0x3a, 0xee, 0xcb, 0xb7, 0x96, 0x30, 0xda, 0xa8, 0x6d, 0x1a, 0x60, 0x1d, 0x24, 0x40,
	0x2f, 0xc4, 0x52, 0x5c, 0x29, 0x6c, 0x44, 0xae, 0x40, 0xae, 0xed, 0xca, 0xa7, 0xfe, 0x83, 0xf6,
	0xd2, 0x6b, 0x8f, 0x45, 0xd1, 0xfe, 0x80, 0x02, 0xfd, 0x03, 0xed, 0xd1, 0x97, 0x02, 0x39, 0x2d,
	0xea, 0xf5, 0xa5, 0xd0, 0x29, 0x3f, 0xa1, 0xd8, 0x5d, 0x52, 0xd4, 0x83, 0x46, 0x50, 0xc3, 0xb7,
	0x99, 0x6f, 0x5e, 0xdf, 0x70, 0x67, 0x46, 0x82, 0xdb, 0xf4, 0x34, 0x89, 0xf1, 0x30, 0xc4, 0x83,
	0xdd, 0x5c, 0x0a, 0x26, 0x82, 0x3b, 0x4c, 0x29, 0xa3, 0xc6, 0x5e, 0x3f, 0x62, 0xcf, 0x8f, 0x03,
	0xb7, 0x4b, 0x63, 0xf7, 0x1b, 0x1c, 0x93, 0x2c, 0x4d, 0xf7, 0x0f, 0x5c, 0xed, 0x84, 0x87, 0x43,
	0x77, 0x92, 0xa1, 0x90, 0x82, 0xf6, 0x7b, 0x27, 0x24, 0x09, 0x69, 0xba, 0x5b, 0x46, 0xee, 0xf6,
	0x69, 0x9f, 0xee, 0xaa, 0x84, 0xc1, 0x71, 0x4f, 0x69, 0x4a, 0x51, 0x92, 0x2e, 0xd4, 0x6e, 0xe9,
	0xf8, 0xbc, 0xbe, 0x06, 0x9d, 0x3f, 0x57, 0xe0, 0xca, 0x43, 0x82, 0x43, 0x92, 0x1a, 0x26, 0x5c,
	0x3d, 0x21, 0x69, 0x16, 0xd1, 0xc4, 0x04, 0x5b, 0x60, 0x67, 0x19, 0x15, 0xaa, 0xf1, 0x14, 0x6e,
	0x86, 0x98, 0xe1, 0x8c, 0x30, 0x3f, 0x4a, 0x7a, 0xd4, 0x5c, 0xda, 0x02, 0x3b, 0x1b, 0x0f, 0x5a,
	0x39, 0x21, 0xf7, 0x50, 0xdb, 0x3a, 0x49, 0x8f, 0x7a, 0x96, 0xe0, 0xf6, 0xc6, 0x14, 0x30, 0xe6,
	0xf6, 0x46, 0x58, 0xaa, 0x68, 0x5a, 0x31, 0x7e, 0x05, 0xf0, 0x5e, 0x42, 0x43, 0x92, 0xf9, 0x19,
	0xe9, 0xb2, 0x88, 0x26, 0x7e, 0x4c, 0x18, 0x96, 0x1e, 0x66, 0x5d, 0x95, 0xf0, 0xdc, 0xff, 0xfd,
	0x71, 0xdc, 0x23, 0x9d, 0xea, 0x51, 0x9e, 0xc9, 0x7b, 0x57, 0x70, 0xfb, 0xee, 0x57, 0xb2, 0xca,
	0x9c, 0x65, 0xcc, 0xed, 0xbb, 0x49, 0x05, 0x8e, 0x2a, 0x51, 0xe3, 0x67, 0x00, 0xdf, 0x38, 0xc5,
	0xa3, 0x0a, 0xae, 0xcb, 0x37, 0xc6, 0xd5, 0x15, 0xdc, 0x6e, 0x3d, 0xc3, 0xa3, 0x0a, 0xaa, 0xad,
	0xd3, 0x45, 0x18, 0x55, 0x81, 0xc6, 0xef, 0x00, 0xb6, 0x19, 0xee, 0xfb, 0x51, 0x12, 0x92, 0x6f,
	0x17, 0xd9, 0xde, 0xba, 0x31, 0xb6, 0x1f, 0x08, 0x6e, 0xdf, 0x7f, 0x82, 0xfb, 0x1d, 0x59, 0x68,
	0x91, 0xf1, 0x7d, 0x56, 0x6d, 0x42, 0x57, 0x19, 0x8c, 0x3f, 0x00, 0x6c, 0xa7, 0x64, 0x80, 0x25,
	0x58, 0xf1, 0x9d, 0x57, 0x6e, 0x8c, 0xf9, 0x47, 0x82, 0xdb, 0x26, 0x2a, 0x2a, 0x2d, 0x52, 0x37,
	0xd3, 0x2b, 0x6c, 0xe8, 0x4a, 0x8b, 0xf3, 0xf7, 0x12, 0xbc, 0xed, 0x0d, 0x68, 0xf7, 0xc5, 0xa4,
	0x9d, 0x9f, 0x00, 0x7c, 0x27, 0x63, 0x38, 0x65, 0x3e, 0xed, 0xf5, 0xe4, 0xf2, 0xf4, 0x52, 0x1a,
	0xfb, 0x05, 0x32, 0xe9, 0x4f, 0xf5, 0x26, 0x37, 0xae, 0xee, 0x7d, 0x2e, 0xb8, 0xbd, 0x7d, 0x24,
	0x1d, 0x1e, 0xab, 0x88, 0x4f, 0x53, 0x1a, 0xe7, 0x6a, 0x5e, 0xee, 0x50, 0x13, 0xdc, 0xce, 0x5e,
	0xe7, 0x84, 0x5e, 0xef, 0x62, 0x3c, 0x87, 0xe6, 0x00, 0x67, 0xcc, 0x8f, 0x18, 0x89, 0xfd, 0x28,
	0xf1, 0x03, 0x49, 0xdf, 0x3f, 0xc1, 0x83, 0x63, 0xa2, 0x76, 0x7c, 0x53, 0x2f, 0xcf, 0x97, 0x38,
	0x63, 0x1d, 0x46, 0xe2, 0x4e, 0xa2, 0xfa, 0x7b, 0x2a, 0xed, 0x72, 0x79, 0x06, 0x15, 0x38, 0xaa,
	0x44, 0x8d, 0x03, 0x08, 0x75, 0xf2, 0x2c, 0x3a, 0x23, 0x6a, 0xb9, 0xeb, 0x5e, 0x5b, 0x70, 0x7b,
	0x5d, 0xf9, 0x1c, 0x45, 0x67, 0x32, 0xe1, 0x7a, 0x50, 0x28, 0xa8, 0x14, 0x1d, 0x0e, 0x60, 0x73,
	0x7e, 0x50, 0x0e, 0x20, 0x64, 0x94, 0xe1, 0x81, 0x4e, 0xa7, 0xae, 0x95, 0x4e, 0xf7, 0x44, 0xa2,
	0x45, 0x3a, 0x56, 0x28, 0xa8, 0x14, 0x8d, 0xef, 0x01, 0x6c, 0x6a, 0x2a, 0xc5, 0x5c, 0x65, 0xe6,
	0xd2, 0x56, 0x7d, 0x67, 0xe3, 0xc1, 0xc7, 0xd7, 0x18, 0xac, 0x99, 0x07, 0xf7, 0xde, 0x14, 0xdc,
	0x6e, 0xcc, 0x40, 0xd9, 0x98, 0xdb, 0x8d, 0x60, 0x06, 0x41, 0x73, 0xba, 0xf3, 0x21, 0x6c, 0xa8,
	0xf3, 0xa4, 0x02, 0xd5, 0xbb, 0xbc, 0x05, 0x6f, 0xa9, 0x13, 0x64, 0x02, 0x45, 0xac, 0x59, 0x1c,
	0xda, 0xc7, 0x47, 0x8f, 0xa4, 0x27, 0xd2, 0x56, 0x67, 0x1f, 0xde, 0x96, 0xb7, 0xa2, 0x8c, 0x73,
	0xe0, 0xb2, 0x3c, 0x08, 0x79, 0x58, 0x63, 0x2a, 0xec, 0x19, 0x1e, 0x21, 0x65, 0x73, 0x3e, 0x83,
	0xc6, 0x64, 0xf0, 0xcb, 0xc8, 0x3d, 0xb8, 0x3e, 0x19, 0xec, 0x3c, 0xbc, 0x35, 0x15, 0x5e, 0x44,
	0xa0, 0xd2, 0xcb, 0x39, 0x83, 0x8d, 0x62, 0xf7, 0x11, 0xe9, 0xd2, 0x34, 0x34, 0xde, 0x87, 0xeb,
	0xfa, 0xe6, 0xbc, 0x20, 0x23, 0xf5, 0x28, 0x9b, 0x9e, 0x29, 0xb8, 0xbd, 0xa6, 0x7c, 0xbe, 0x20,
	0xa3, 0x31, 0xb7, 0xd7, 0xa2, 0x5c, 0x46, 0x13, 0xc9, 0xd8, 0x83, 0x6b, 0x7a, 0x00, 0x43, 0xfd,
	0x12, 0x75, 0xef, 0x9e, 0xe0, 0xf6, 0xaa, 0x9a, 0xa1, 0x43, 0xf9, 0x01, 0x57, 0xa5, 0xb9, 0x13,
	0x66, 0xa8, 0x10, 0x9c, 0xdf, 0x00, 0xbc, 0x53, 0x14, 0x2f, 0x9b, 0xf8, 0x11, 0xc0, 0x3b, 0xe5,
	0xe1, 0x4b, 0x15, 0xa9, 0xa2, 0x9b, 0x4f, 0xae, 0xf1, 0xb8, 0xb3, 0xed, 0x79, 0x6f, 0x0b, 0x6e,
	0x37, 0x67, 0x31, 0xc9, 0xae, 0xc9, 0x66, 0x21, 0x34, 0x0f, 0x78, 0x0f, 0xcf, 0x2f, 0xac, 0xda,
	0xcb, 0x0b, 0xab, 0xf6, 0xea, 0xc2, 0x02, 0xdf, 0x09, 0x0b, 0xfc, 0x22, 0x2c, 0xf0, 0x97, 0xb0,
	0xc0, 0xb9, 0xb0, 0xc0, 0x3f, 0xc2, 0x02, 0xff, 0x0a, 0xab, 0xf6, 0x4a, 0x58, 0xe0, 0x87, 0x4b,
	0xab, 0x76, 0x7e, 0x69, 0xd5, 0x5e, 0x5e, 0x5a, 0xb5, 0xaf, 0x8d, 0xc5, 0xbf, 0x0e, 0xc1, 0x8a,
	0xfa, 0xd1, 0xde, 0xff, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x01, 0xde, 0x53, 0xb1, 0x57, 0x08, 0x00,
	0x00,
}

func (this *Header) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Header)
	if !ok {
		that2, ok := that.(Header)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if !this.DatasetInfo.Equal(that1.DatasetInfo) {
		return false
	}
	if !this.NodesSectionMetadata.Equal(that1.NodesSectionMetadata) {
		return false
	}
	if !this.WaysSectionMetadata.Equal(that1.WaysSectionMetadata) {
		return false
	}
	if !this.TagIndexSectionMetadata.Equal(that1.TagIndexSectionMetadata) {
		return false
	}
	if !this.RelationsSectionMetadata.Equal(that1.RelationsSectionMetadata) {
		return false
	}
	return true
}
func (this *BlockMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BlockMetadata)
	if !ok {
		that2, ok := that.(BlockMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StartOffsetFromStartOfSectionData != that1.StartOffsetFromStartOfSectionData {
		return false
	}
	if !bytes.Equal(this.LastItemInBlockValue, that1.LastItemInBlockValue) {
		return false
	}
	if this.BlockSize != that1.BlockSize {
		return false
	}
	return true
}
func (this *SectionMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SectionMetadata)
	if !ok {
		that2, ok := that.(SectionMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalSize != that1.TotalSize {
		return false
	}
	if len(this.BlockMetadatas) != len(that1.BlockMetadatas) {
		return false
	}
	for i := range this.BlockMetadatas {
		if !this.BlockMetadatas[i].Equal(that1.BlockMetadatas[i]) {
			return false
		}
	}
	return true
}
func (this *NodesBlockData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodesBlockData)
	if !ok {
		that2, ok := that.(NodesBlockData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Nodes) != len(that1.Nodes) {
		return false
	}
	for i := range this.Nodes {
		if !this.Nodes[i].Equal(that1.Nodes[i]) {
			return false
		}
	}
	return true
}
func (this *WaysBlockData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WaysBlockData)
	if !ok {
		that2, ok := that.(WaysBlockData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Ways) != len(that1.Ways) {
		return false
	}
	for i := range this.Ways {
		if !this.Ways[i].Equal(that1.Ways[i]) {
			return false
		}
	}
	return true
}
func (this *RelationsBlockData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RelationsBlockData)
	if !ok {
		that2, ok := that.(RelationsBlockData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Relations) != len(that1.Relations) {
		return false
	}
	for i := range this.Relations {
		if !this.Relations[i].Equal(that1.Relations[i]) {
			return false
		}
	}
	return true
}
func (this *TagIndexRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TagIndexRecord)
	if !ok {
		that2, ok := that.(TagIndexRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.IndexKey, that1.IndexKey) {
		return false
	}
	if len(this.ItemIDs) != len(that1.ItemIDs) {
		return false
	}
	for i := range this.ItemIDs {
		if this.ItemIDs[i] != that1.ItemIDs[i] {
			return false
		}
	}
	return true
}
func (this *TagIndexBlockData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TagIndexBlockData)
	if !ok {
		that2, ok := that.(TagIndexBlockData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.TagIndexRecords) != len(that1.TagIndexRecords) {
		return false
	}
	for i := range this.TagIndexRecords {
		if !this.TagIndexRecords[i].Equal(that1.TagIndexRecords[i]) {
			return false
		}
	}
	return true
}
func (this *Header) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&ownmapdb.Header{")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	if this.DatasetInfo != nil {
		s = append(s, "DatasetInfo: "+fmt.Sprintf("%#v", this.DatasetInfo)+",\n")
	}
	if this.NodesSectionMetadata != nil {
		s = append(s, "NodesSectionMetadata: "+fmt.Sprintf("%#v", this.NodesSectionMetadata)+",\n")
	}
	if this.WaysSectionMetadata != nil {
		s = append(s, "WaysSectionMetadata: "+fmt.Sprintf("%#v", this.WaysSectionMetadata)+",\n")
	}
	if this.TagIndexSectionMetadata != nil {
		s = append(s, "TagIndexSectionMetadata: "+fmt.Sprintf("%#v", this.TagIndexSectionMetadata)+",\n")
	}
	if this.RelationsSectionMetadata != nil {
		s = append(s, "RelationsSectionMetadata: "+fmt.Sprintf("%#v", this.RelationsSectionMetadata)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BlockMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ownmapdb.BlockMetadata{")
	s = append(s, "StartOffsetFromStartOfSectionData: "+fmt.Sprintf("%#v", this.StartOffsetFromStartOfSectionData)+",\n")
	s = append(s, "LastItemInBlockValue: "+fmt.Sprintf("%#v", this.LastItemInBlockValue)+",\n")
	s = append(s, "BlockSize: "+fmt.Sprintf("%#v", this.BlockSize)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SectionMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ownmapdb.SectionMetadata{")
	s = append(s, "TotalSize: "+fmt.Sprintf("%#v", this.TotalSize)+",\n")
	if this.BlockMetadatas != nil {
		s = append(s, "BlockMetadatas: "+fmt.Sprintf("%#v", this.BlockMetadatas)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodesBlockData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ownmapdb.NodesBlockData{")
	if this.Nodes != nil {
		s = append(s, "Nodes: "+fmt.Sprintf("%#v", this.Nodes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WaysBlockData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ownmapdb.WaysBlockData{")
	if this.Ways != nil {
		s = append(s, "Ways: "+fmt.Sprintf("%#v", this.Ways)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RelationsBlockData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ownmapdb.RelationsBlockData{")
	if this.Relations != nil {
		s = append(s, "Relations: "+fmt.Sprintf("%#v", this.Relations)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TagIndexRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ownmapdb.TagIndexRecord{")
	s = append(s, "IndexKey: "+fmt.Sprintf("%#v", this.IndexKey)+",\n")
	s = append(s, "ItemIDs: "+fmt.Sprintf("%#v", this.ItemIDs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TagIndexBlockData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ownmapdb.TagIndexBlockData{")
	if this.TagIndexRecords != nil {
		s = append(s, "TagIndexRecords: "+fmt.Sprintf("%#v", this.TagIndexRecords)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringOwnmapdb(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Header) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Header) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Header) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RelationsSectionMetadata != nil {
		{
			size, err := m.RelationsSectionMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOwnmapdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.TagIndexSectionMetadata != nil {
		{
			size, err := m.TagIndexSectionMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOwnmapdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.WaysSectionMetadata != nil {
		{
			size, err := m.WaysSectionMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOwnmapdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.NodesSectionMetadata != nil {
		{
			size, err := m.NodesSectionMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOwnmapdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.DatasetInfo != nil {
		{
			size, err := m.DatasetInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOwnmapdb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Version != 0 {
		i = encodeVarintOwnmapdb(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlockMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockSize != 0 {
		i = encodeVarintOwnmapdb(dAtA, i, uint64(m.BlockSize))
		i--
		dAtA[i] = 0x18
	}
	if len(m.LastItemInBlockValue) > 0 {
		i -= len(m.LastItemInBlockValue)
		copy(dAtA[i:], m.LastItemInBlockValue)
		i = encodeVarintOwnmapdb(dAtA, i, uint64(len(m.LastItemInBlockValue)))
		i--
		dAtA[i] = 0x12
	}
	if m.StartOffsetFromStartOfSectionData != 0 {
		i = encodeVarintOwnmapdb(dAtA, i, uint64(m.StartOffsetFromStartOfSectionData))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SectionMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SectionMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SectionMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlockMetadatas) > 0 {
		for iNdEx := len(m.BlockMetadatas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlockMetadatas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOwnmapdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.TotalSize != 0 {
		i = encodeVarintOwnmapdb(dAtA, i, uint64(m.TotalSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NodesBlockData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodesBlockData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodesBlockData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOwnmapdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WaysBlockData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WaysBlockData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WaysBlockData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ways) > 0 {
		for iNdEx := len(m.Ways) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ways[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOwnmapdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RelationsBlockData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelationsBlockData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelationsBlockData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Relations) > 0 {
		for iNdEx := len(m.Relations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Relations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOwnmapdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TagIndexRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagIndexRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TagIndexRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ItemIDs) > 0 {
		dAtA7 := make([]byte, len(m.ItemIDs)*10)
		var j6 int
		for _, num1 := range m.ItemIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintOwnmapdb(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IndexKey) > 0 {
		i -= len(m.IndexKey)
		copy(dAtA[i:], m.IndexKey)
		i = encodeVarintOwnmapdb(dAtA, i, uint64(len(m.IndexKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TagIndexBlockData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagIndexBlockData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TagIndexBlockData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TagIndexRecords) > 0 {
		for iNdEx := len(m.TagIndexRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TagIndexRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOwnmapdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintOwnmapdb(dAtA []byte, offset int, v uint64) int {
	offset -= sovOwnmapdb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Header) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovOwnmapdb(uint64(m.Version))
	}
	if m.DatasetInfo != nil {
		l = m.DatasetInfo.Size()
		n += 1 + l + sovOwnmapdb(uint64(l))
	}
	if m.NodesSectionMetadata != nil {
		l = m.NodesSectionMetadata.Size()
		n += 1 + l + sovOwnmapdb(uint64(l))
	}
	if m.WaysSectionMetadata != nil {
		l = m.WaysSectionMetadata.Size()
		n += 1 + l + sovOwnmapdb(uint64(l))
	}
	if m.TagIndexSectionMetadata != nil {
		l = m.TagIndexSectionMetadata.Size()
		n += 1 + l + sovOwnmapdb(uint64(l))
	}
	if m.RelationsSectionMetadata != nil {
		l = m.RelationsSectionMetadata.Size()
		n += 1 + l + sovOwnmapdb(uint64(l))
	}
	return n
}

func (m *BlockMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartOffsetFromStartOfSectionData != 0 {
		n += 1 + sovOwnmapdb(uint64(m.StartOffsetFromStartOfSectionData))
	}
	l = len(m.LastItemInBlockValue)
	if l > 0 {
		n += 1 + l + sovOwnmapdb(uint64(l))
	}
	if m.BlockSize != 0 {
		n += 1 + sovOwnmapdb(uint64(m.BlockSize))
	}
	return n
}

func (m *SectionMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalSize != 0 {
		n += 1 + sovOwnmapdb(uint64(m.TotalSize))
	}
	if len(m.BlockMetadatas) > 0 {
		for _, e := range m.BlockMetadatas {
			l = e.Size()
			n += 1 + l + sovOwnmapdb(uint64(l))
		}
	}
	return n
}

func (m *NodesBlockData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovOwnmapdb(uint64(l))
		}
	}
	return n
}

func (m *WaysBlockData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ways) > 0 {
		for _, e := range m.Ways {
			l = e.Size()
			n += 1 + l + sovOwnmapdb(uint64(l))
		}
	}
	return n
}

func (m *RelationsBlockData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Relations) > 0 {
		for _, e := range m.Relations {
			l = e.Size()
			n += 1 + l + sovOwnmapdb(uint64(l))
		}
	}
	return n
}

func (m *TagIndexRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IndexKey)
	if l > 0 {
		n += 1 + l + sovOwnmapdb(uint64(l))
	}
	if len(m.ItemIDs) > 0 {
		l = 0
		for _, e := range m.ItemIDs {
			l += sovOwnmapdb(uint64(e))
		}
		n += 1 + sovOwnmapdb(uint64(l)) + l
	}
	return n
}

func (m *TagIndexBlockData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TagIndexRecords) > 0 {
		for _, e := range m.TagIndexRecords {
			l = e.Size()
			n += 1 + l + sovOwnmapdb(uint64(l))
		}
	}
	return n
}

func sovOwnmapdb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOwnmapdb(x uint64) (n int) {
	return sovOwnmapdb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Header) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Header{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`DatasetInfo:` + strings.Replace(fmt.Sprintf("%v", this.DatasetInfo), "DatasetInfo", "ownmap.DatasetInfo", 1) + `,`,
		`NodesSectionMetadata:` + strings.Replace(this.NodesSectionMetadata.String(), "SectionMetadata", "SectionMetadata", 1) + `,`,
		`WaysSectionMetadata:` + strings.Replace(this.WaysSectionMetadata.String(), "SectionMetadata", "SectionMetadata", 1) + `,`,
		`TagIndexSectionMetadata:` + strings.Replace(this.TagIndexSectionMetadata.String(), "SectionMetadata", "SectionMetadata", 1) + `,`,
		`RelationsSectionMetadata:` + strings.Replace(this.RelationsSectionMetadata.String(), "SectionMetadata", "SectionMetadata", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BlockMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BlockMetadata{`,
		`StartOffsetFromStartOfSectionData:` + fmt.Sprintf("%v", this.StartOffsetFromStartOfSectionData) + `,`,
		`LastItemInBlockValue:` + fmt.Sprintf("%v", this.LastItemInBlockValue) + `,`,
		`BlockSize:` + fmt.Sprintf("%v", this.BlockSize) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SectionMetadata) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForBlockMetadatas := "[]*BlockMetadata{"
	for _, f := range this.BlockMetadatas {
		repeatedStringForBlockMetadatas += strings.Replace(f.String(), "BlockMetadata", "BlockMetadata", 1) + ","
	}
	repeatedStringForBlockMetadatas += "}"
	s := strings.Join([]string{`&SectionMetadata{`,
		`TotalSize:` + fmt.Sprintf("%v", this.TotalSize) + `,`,
		`BlockMetadatas:` + repeatedStringForBlockMetadatas + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodesBlockData) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNodes := "[]*OSMNode{"
	for _, f := range this.Nodes {
		repeatedStringForNodes += strings.Replace(fmt.Sprintf("%v", f), "OSMNode", "ownmap.OSMNode", 1) + ","
	}
	repeatedStringForNodes += "}"
	s := strings.Join([]string{`&NodesBlockData{`,
		`Nodes:` + repeatedStringForNodes + `,`,
		`}`,
	}, "")
	return s
}
func (this *WaysBlockData) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForWays := "[]*OSMWay{"
	for _, f := range this.Ways {
		repeatedStringForWays += strings.Replace(fmt.Sprintf("%v", f), "OSMWay", "ownmap.OSMWay", 1) + ","
	}
	repeatedStringForWays += "}"
	s := strings.Join([]string{`&WaysBlockData{`,
		`Ways:` + repeatedStringForWays + `,`,
		`}`,
	}, "")
	return s
}
func (this *RelationsBlockData) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRelations := "[]*OSMRelation{"
	for _, f := range this.Relations {
		repeatedStringForRelations += strings.Replace(fmt.Sprintf("%v", f), "OSMRelation", "ownmap.OSMRelation", 1) + ","
	}
	repeatedStringForRelations += "}"
	s := strings.Join([]string{`&RelationsBlockData{`,
		`Relations:` + repeatedStringForRelations + `,`,
		`}`,
	}, "")
	return s
}
func (this *TagIndexRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TagIndexRecord{`,
		`IndexKey:` + fmt.Sprintf("%v", this.IndexKey) + `,`,
		`ItemIDs:` + fmt.Sprintf("%v", this.ItemIDs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TagIndexBlockData) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagIndexRecords := "[]*TagIndexRecord{"
	for _, f := range this.TagIndexRecords {
		repeatedStringForTagIndexRecords += strings.Replace(f.String(), "TagIndexRecord", "TagIndexRecord", 1) + ","
	}
	repeatedStringForTagIndexRecords += "}"
	s := strings.Join([]string{`&TagIndexBlockData{`,
		`TagIndexRecords:` + repeatedStringForTagIndexRecords + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringOwnmapdb(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Header) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOwnmapdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwnmapdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatasetInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwnmapdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOwnmapdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOwnmapdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DatasetInfo == nil {
				m.DatasetInfo = &ownmap.DatasetInfo{}
			}
			if err := m.DatasetInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodesSectionMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwnmapdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOwnmapdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOwnmapdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodesSectionMetadata == nil {
				m.NodesSectionMetadata = &SectionMetadata{}
			}
			if err := m.NodesSectionMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaysSectionMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwnmapdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOwnmapdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOwnmapdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WaysSectionMetadata == nil {
				m.WaysSectionMetadata = &SectionMetadata{}
			}
			if err := m.WaysSectionMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagIndexSectionMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwnmapdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOwnmapdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOwnmapdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TagIndexSectionMetadata == nil {
				m.TagIndexSectionMetadata = &SectionMetadata{}
			}
			if err := m.TagIndexSectionMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelationsSectionMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwnmapdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOwnmapdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOwnmapdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RelationsSectionMetadata == nil {
				m.RelationsSectionMetadata = &SectionMetadata{}
			}
			if err := m.RelationsSectionMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOwnmapdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOwnmapdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOwnmapdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartOffsetFromStartOfSectionData", wireType)
			}
			m.StartOffsetFromStartOfSectionData = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwnmapdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartOffsetFromStartOfSectionData |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastItemInBlockValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwnmapdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOwnmapdb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOwnmapdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastItemInBlockValue = append(m.LastItemInBlockValue[:0], dAtA[iNdEx:postIndex]...)
			if m.LastItemInBlockValue == nil {
				m.LastItemInBlockValue = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockSize", wireType)
			}
			m.BlockSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwnmapdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOwnmapdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOwnmapdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SectionMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOwnmapdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SectionMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SectionMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSize", wireType)
			}
			m.TotalSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwnmapdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockMetadatas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwnmapdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOwnmapdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOwnmapdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockMetadatas = append(m.BlockMetadatas, &BlockMetadata{})
			if err := m.BlockMetadatas[len(m.BlockMetadatas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOwnmapdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOwnmapdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodesBlockData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOwnmapdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodesBlockData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodesBlockData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwnmapdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOwnmapdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOwnmapdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &ownmap.OSMNode{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOwnmapdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOwnmapdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WaysBlockData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOwnmapdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WaysBlockData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WaysBlockData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ways", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwnmapdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOwnmapdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOwnmapdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ways = append(m.Ways, &ownmap.OSMWay{})
			if err := m.Ways[len(m.Ways)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOwnmapdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOwnmapdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelationsBlockData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOwnmapdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelationsBlockData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelationsBlockData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwnmapdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOwnmapdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOwnmapdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relations = append(m.Relations, &ownmap.OSMRelation{})
			if err := m.Relations[len(m.Relations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOwnmapdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOwnmapdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagIndexRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOwnmapdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagIndexRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagIndexRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwnmapdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOwnmapdb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOwnmapdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexKey = append(m.IndexKey[:0], dAtA[iNdEx:postIndex]...)
			if m.IndexKey == nil {
				m.IndexKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOwnmapdb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ItemIDs = append(m.ItemIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOwnmapdb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthOwnmapdb
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthOwnmapdb
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ItemIDs) == 0 {
					m.ItemIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOwnmapdb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ItemIDs = append(m.ItemIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOwnmapdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOwnmapdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagIndexBlockData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOwnmapdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagIndexBlockData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagIndexBlockData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagIndexRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwnmapdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOwnmapdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOwnmapdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TagIndexRecords = append(m.TagIndexRecords, &TagIndexRecord{})
			if err := m.TagIndexRecords[len(m.TagIndexRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOwnmapdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOwnmapdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOwnmapdb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOwnmapdb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOwnmapdb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOwnmapdb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOwnmapdb
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOwnmapdb
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOwnmapdb
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOwnmapdb        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOwnmapdb          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOwnmapdb = fmt.Errorf("proto: unexpected end of group")
)
