// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ownmap/ownmap.proto

package ownmap

import (
	bytes "bytes"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OSMRelationMember_OSMMemberType int32

const (
	OSM_MEMBER_TYPE_UNKNOWN  OSMRelationMember_OSMMemberType = 0
	OSM_MEMBER_TYPE_NODE     OSMRelationMember_OSMMemberType = 1
	OSM_MEMBER_TYPE_WAY      OSMRelationMember_OSMMemberType = 2
	OSM_MEMBER_TYPE_RELATION OSMRelationMember_OSMMemberType = 3
)

var OSMRelationMember_OSMMemberType_name = map[int32]string{
	0: "OSM_MEMBER_TYPE_UNKNOWN",
	1: "OSM_MEMBER_TYPE_NODE",
	2: "OSM_MEMBER_TYPE_WAY",
	3: "OSM_MEMBER_TYPE_RELATION",
}

var OSMRelationMember_OSMMemberType_value = map[string]int32{
	"OSM_MEMBER_TYPE_UNKNOWN":  0,
	"OSM_MEMBER_TYPE_NODE":     1,
	"OSM_MEMBER_TYPE_WAY":      2,
	"OSM_MEMBER_TYPE_RELATION": 3,
}

func (OSMRelationMember_OSMMemberType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7e6171d0cad86ce0, []int{5, 0}
}

type OSMRelationMember_OSMMemberOrientation int32

const (
	OSM_MEMBER_ORIENTATION_UNKNOWN           OSMRelationMember_OSMMemberOrientation = 0
	OSM_MEMBER_ORIENTATION_CLOCKWISE         OSMRelationMember_OSMMemberOrientation = 1
	OSM_MEMBER_ORIENTATION_COUNTER_CLOCKWISE OSMRelationMember_OSMMemberOrientation = 2
)

var OSMRelationMember_OSMMemberOrientation_name = map[int32]string{
	0: "OSM_MEMBER_ORIENTATION_UNKNOWN",
	1: "OSM_MEMBER_ORIENTATION_CLOCKWISE",
	2: "OSM_MEMBER_ORIENTATION_COUNTER_CLOCKWISE",
}

var OSMRelationMember_OSMMemberOrientation_value = map[string]int32{
	"OSM_MEMBER_ORIENTATION_UNKNOWN":           0,
	"OSM_MEMBER_ORIENTATION_CLOCKWISE":         1,
	"OSM_MEMBER_ORIENTATION_COUNTER_CLOCKWISE": 2,
}

func (OSMRelationMember_OSMMemberOrientation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7e6171d0cad86ce0, []int{5, 1}
}

type OSMNode struct {
	ID   int64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" parquet:"name=id, type=INT64"`
	Tags []*OSMTag `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty" parquet:"name=tags, type=LIST"`
	Lat  float64   `protobuf:"fixed64,3,opt,name=lat,proto3" json:"lat,omitempty" parquet:"name=lat, type=DOUBLE"`
	Lon  float64   `protobuf:"fixed64,4,opt,name=lon,proto3" json:"lon,omitempty" parquet:"name=lon, type=DOUBLE"`
}

func (m *OSMNode) Reset()      { *m = OSMNode{} }
func (*OSMNode) ProtoMessage() {}
func (*OSMNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e6171d0cad86ce0, []int{0}
}
func (m *OSMNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OSMNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OSMNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OSMNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSMNode.Merge(m, src)
}
func (m *OSMNode) XXX_Size() int {
	return m.Size()
}
func (m *OSMNode) XXX_DiscardUnknown() {
	xxx_messageInfo_OSMNode.DiscardUnknown(m)
}

var xxx_messageInfo_OSMNode proto.InternalMessageInfo

func (m *OSMNode) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *OSMNode) GetTags() []*OSMTag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *OSMNode) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *OSMNode) GetLon() float64 {
	if m != nil {
		return m.Lon
	}
	return 0
}

type OSMTag struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty" parquet:"name=key, type=BYTE_ARRAY, convertedtype=UTF8"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty" parquet:"name=value, type=BYTE_ARRAY, convertedtype=UTF8"`
}

func (m *OSMTag) Reset()      { *m = OSMTag{} }
func (*OSMTag) ProtoMessage() {}
func (*OSMTag) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e6171d0cad86ce0, []int{1}
}
func (m *OSMTag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OSMTag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OSMTag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OSMTag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSMTag.Merge(m, src)
}
func (m *OSMTag) XXX_Size() int {
	return m.Size()
}
func (m *OSMTag) XXX_DiscardUnknown() {
	xxx_messageInfo_OSMTag.DiscardUnknown(m)
}

var xxx_messageInfo_OSMTag proto.InternalMessageInfo

func (m *OSMTag) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *OSMTag) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Location struct {
	Lat float64 `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty" parquet:"name=lat, type=DOUBLE"`
	Lon float64 `protobuf:"fixed64,2,opt,name=lon,proto3" json:"lon,omitempty" parquet:"name=lon, type=DOUBLE"`
}

func (m *Location) Reset()      { *m = Location{} }
func (*Location) ProtoMessage() {}
func (*Location) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e6171d0cad86ce0, []int{2}
}
func (m *Location) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Location) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Location.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Location) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Location.Merge(m, src)
}
func (m *Location) XXX_Size() int {
	return m.Size()
}
func (m *Location) XXX_DiscardUnknown() {
	xxx_messageInfo_Location.DiscardUnknown(m)
}

var xxx_messageInfo_Location proto.InternalMessageInfo

func (m *Location) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *Location) GetLon() float64 {
	if m != nil {
		return m.Lon
	}
	return 0
}

type WayPoint struct {
	NodeID int64     `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"nodeId" parquet:"name=nodeId, type=INT64"`
	Point  *Location `protobuf:"bytes,2,opt,name=point,proto3" json:"point,omitempty" parquet:"name=point, type=STRUCT"`
}

func (m *WayPoint) Reset()      { *m = WayPoint{} }
func (*WayPoint) ProtoMessage() {}
func (*WayPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e6171d0cad86ce0, []int{3}
}
func (m *WayPoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WayPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WayPoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WayPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WayPoint.Merge(m, src)
}
func (m *WayPoint) XXX_Size() int {
	return m.Size()
}
func (m *WayPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_WayPoint.DiscardUnknown(m)
}

var xxx_messageInfo_WayPoint proto.InternalMessageInfo

func (m *WayPoint) GetNodeID() int64 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *WayPoint) GetPoint() *Location {
	if m != nil {
		return m.Point
	}
	return nil
}

type OSMWay struct {
	ID        int64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" parquet:"name=id, type=INT64"`
	Tags      []*OSMTag   `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty" parquet:"name=tags, type=LIST"`
	WayPoints []*WayPoint `protobuf:"bytes,3,rep,name=way_points,json=wayPoints,proto3" json:"wayPoints" parquet:"name=wayPoints, type=LIST"`
}

func (m *OSMWay) Reset()      { *m = OSMWay{} }
func (*OSMWay) ProtoMessage() {}
func (*OSMWay) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e6171d0cad86ce0, []int{4}
}
func (m *OSMWay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OSMWay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OSMWay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OSMWay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSMWay.Merge(m, src)
}
func (m *OSMWay) XXX_Size() int {
	return m.Size()
}
func (m *OSMWay) XXX_DiscardUnknown() {
	xxx_messageInfo_OSMWay.DiscardUnknown(m)
}

var xxx_messageInfo_OSMWay proto.InternalMessageInfo

func (m *OSMWay) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *OSMWay) GetTags() []*OSMTag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *OSMWay) GetWayPoints() []*WayPoint {
	if m != nil {
		return m.WayPoints
	}
	return nil
}

type OSMRelationMember struct {
	ObjectID    int64                                  `protobuf:"varint,1,opt,name=object_id,json=objectId,proto3" json:"objectId" parquet:"name=objectId, type=INT64"`
	MemberType  OSMRelationMember_OSMMemberType        `protobuf:"varint,2,opt,name=member_type,json=memberType,proto3,enum=ownmap.OSMRelationMember_OSMMemberType" json:"memberType" parquet:"name=memberType, type=INT32"`
	Role        string                                 `protobuf:"bytes,3,opt,name=role,proto3" json:"role" parquet:"name=role, type=BYTE_ARRAY, convertedtype=UTF8"`
	Orientation OSMRelationMember_OSMMemberOrientation `protobuf:"varint,4,opt,name=orientation,proto3,enum=ownmap.OSMRelationMember_OSMMemberOrientation" json:"orientation" parquet:"name=orientation, type=INT32"`
}

func (m *OSMRelationMember) Reset()      { *m = OSMRelationMember{} }
func (*OSMRelationMember) ProtoMessage() {}
func (*OSMRelationMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e6171d0cad86ce0, []int{5}
}
func (m *OSMRelationMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OSMRelationMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OSMRelationMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OSMRelationMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSMRelationMember.Merge(m, src)
}
func (m *OSMRelationMember) XXX_Size() int {
	return m.Size()
}
func (m *OSMRelationMember) XXX_DiscardUnknown() {
	xxx_messageInfo_OSMRelationMember.DiscardUnknown(m)
}

var xxx_messageInfo_OSMRelationMember proto.InternalMessageInfo

func (m *OSMRelationMember) GetObjectID() int64 {
	if m != nil {
		return m.ObjectID
	}
	return 0
}

func (m *OSMRelationMember) GetMemberType() OSMRelationMember_OSMMemberType {
	if m != nil {
		return m.MemberType
	}
	return OSM_MEMBER_TYPE_UNKNOWN
}

func (m *OSMRelationMember) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *OSMRelationMember) GetOrientation() OSMRelationMember_OSMMemberOrientation {
	if m != nil {
		return m.Orientation
	}
	return OSM_MEMBER_ORIENTATION_UNKNOWN
}

type OSMRelation struct {
	ID      int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" parquet:"name=id, type=INT64"`
	Tags    []*OSMTag            `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty" parquet:"name=tags, type=LIST"`
	Members []*OSMRelationMember `protobuf:"bytes,3,rep,name=members,proto3" json:"members,omitempty" parquet:"name=members, type=LIST"`
}

func (m *OSMRelation) Reset()      { *m = OSMRelation{} }
func (*OSMRelation) ProtoMessage() {}
func (*OSMRelation) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e6171d0cad86ce0, []int{6}
}
func (m *OSMRelation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OSMRelation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OSMRelation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OSMRelation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSMRelation.Merge(m, src)
}
func (m *OSMRelation) XXX_Size() int {
	return m.Size()
}
func (m *OSMRelation) XXX_DiscardUnknown() {
	xxx_messageInfo_OSMRelation.DiscardUnknown(m)
}

var xxx_messageInfo_OSMRelation proto.InternalMessageInfo

func (m *OSMRelation) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *OSMRelation) GetTags() []*OSMTag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *OSMRelation) GetMembers() []*OSMRelationMember {
	if m != nil {
		return m.Members
	}
	return nil
}

type IndexIDList struct {
	IDs []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (m *IndexIDList) Reset()      { *m = IndexIDList{} }
func (*IndexIDList) ProtoMessage() {}
func (*IndexIDList) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e6171d0cad86ce0, []int{7}
}
func (m *IndexIDList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexIDList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexIDList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexIDList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexIDList.Merge(m, src)
}
func (m *IndexIDList) XXX_Size() int {
	return m.Size()
}
func (m *IndexIDList) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexIDList.DiscardUnknown(m)
}

var xxx_messageInfo_IndexIDList proto.InternalMessageInfo

func (m *IndexIDList) GetIDs() []int64 {
	if m != nil {
		return m.IDs
	}
	return nil
}

type DatasetInfo struct {
	Bounds            *DatasetInfo_Bounds `protobuf:"bytes,1,opt,name=bounds,proto3" json:"bounds,omitempty"`
	ReplicationTimeMs uint64              `protobuf:"varint,2,opt,name=replication_time_ms,json=replicationTimeMs,proto3" json:"replicationTimeMs"`
}

func (m *DatasetInfo) Reset()      { *m = DatasetInfo{} }
func (*DatasetInfo) ProtoMessage() {}
func (*DatasetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e6171d0cad86ce0, []int{8}
}
func (m *DatasetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DatasetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DatasetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DatasetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatasetInfo.Merge(m, src)
}
func (m *DatasetInfo) XXX_Size() int {
	return m.Size()
}
func (m *DatasetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DatasetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DatasetInfo proto.InternalMessageInfo

func (m *DatasetInfo) GetBounds() *DatasetInfo_Bounds {
	if m != nil {
		return m.Bounds
	}
	return nil
}

func (m *DatasetInfo) GetReplicationTimeMs() uint64 {
	if m != nil {
		return m.ReplicationTimeMs
	}
	return 0
}

type DatasetInfo_Bounds struct {
	MinLat float64 `protobuf:"fixed64,1,opt,name=min_lat,json=minLat,proto3" json:"minLat"`
	MaxLat float64 `protobuf:"fixed64,2,opt,name=max_lat,json=maxLat,proto3" json:"maxLat"`
	MinLon float64 `protobuf:"fixed64,3,opt,name=min_lon,json=minLon,proto3" json:"minLon"`
	MaxLon float64 `protobuf:"fixed64,4,opt,name=max_lon,json=maxLon,proto3" json:"maxLon"`
}

func (m *DatasetInfo_Bounds) Reset()      { *m = DatasetInfo_Bounds{} }
func (*DatasetInfo_Bounds) ProtoMessage() {}
func (*DatasetInfo_Bounds) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e6171d0cad86ce0, []int{8, 0}
}
func (m *DatasetInfo_Bounds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DatasetInfo_Bounds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DatasetInfo_Bounds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DatasetInfo_Bounds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatasetInfo_Bounds.Merge(m, src)
}
func (m *DatasetInfo_Bounds) XXX_Size() int {
	return m.Size()
}
func (m *DatasetInfo_Bounds) XXX_DiscardUnknown() {
	xxx_messageInfo_DatasetInfo_Bounds.DiscardUnknown(m)
}

var xxx_messageInfo_DatasetInfo_Bounds proto.InternalMessageInfo

func (m *DatasetInfo_Bounds) GetMinLat() float64 {
	if m != nil {
		return m.MinLat
	}
	return 0
}

func (m *DatasetInfo_Bounds) GetMaxLat() float64 {
	if m != nil {
		return m.MaxLat
	}
	return 0
}

func (m *DatasetInfo_Bounds) GetMinLon() float64 {
	if m != nil {
		return m.MinLon
	}
	return 0
}

func (m *DatasetInfo_Bounds) GetMaxLon() float64 {
	if m != nil {
		return m.MaxLon
	}
	return 0
}

type KVPair struct {
	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *KVPair) Reset()      { *m = KVPair{} }
func (*KVPair) ProtoMessage() {}
func (*KVPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e6171d0cad86ce0, []int{9}
}
func (m *KVPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KVPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KVPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KVPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KVPair.Merge(m, src)
}
func (m *KVPair) XXX_Size() int {
	return m.Size()
}
func (m *KVPair) XXX_DiscardUnknown() {
	xxx_messageInfo_KVPair.DiscardUnknown(m)
}

var xxx_messageInfo_KVPair proto.InternalMessageInfo

func (m *KVPair) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KVPair) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterEnum("ownmap.OSMRelationMember_OSMMemberType", OSMRelationMember_OSMMemberType_name, OSMRelationMember_OSMMemberType_value)
	proto.RegisterEnum("ownmap.OSMRelationMember_OSMMemberOrientation", OSMRelationMember_OSMMemberOrientation_name, OSMRelationMember_OSMMemberOrientation_value)
	proto.RegisterType((*OSMNode)(nil), "ownmap.OSMNode")
	proto.RegisterType((*OSMTag)(nil), "ownmap.OSMTag")
	proto.RegisterType((*Location)(nil), "ownmap.Location")
	proto.RegisterType((*WayPoint)(nil), "ownmap.WayPoint")
	proto.RegisterType((*OSMWay)(nil), "ownmap.OSMWay")
	proto.RegisterType((*OSMRelationMember)(nil), "ownmap.OSMRelationMember")
	proto.RegisterType((*OSMRelation)(nil), "ownmap.OSMRelation")
	proto.RegisterType((*IndexIDList)(nil), "ownmap.IndexIDList")
	proto.RegisterType((*DatasetInfo)(nil), "ownmap.DatasetInfo")
	proto.RegisterType((*DatasetInfo_Bounds)(nil), "ownmap.DatasetInfo.Bounds")
	proto.RegisterType((*KVPair)(nil), "ownmap.KVPair")
}

func init() { proto.RegisterFile("ownmap/ownmap.proto", fileDescriptor_7e6171d0cad86ce0) }

var fileDescriptor_7e6171d0cad86ce0 = []byte{
	// 1101 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0xce, 0x24, 0x6d, 0xda, 0x4e, 0x96, 0x2a, 0x9d, 0x56, 0xda, 0x6c, 0x01, 0x4f, 0xf0, 0xb2,
	0xbb, 0x11, 0xea, 0xb6, 0x28, 0x5d, 0xd8, 0x2d, 0xa8, 0x42, 0x75, 0x93, 0x95, 0xac, 0xc6, 0x71,
	0x35, 0x71, 0x29, 0xad, 0x56, 0x8a, 0x9c, 0x66, 0xb6, 0x78, 0x37, 0xf6, 0x04, 0xc7, 0xfd, 0x91,
	0x03, 0x12, 0x77, 0x24, 0xe0, 0xcf, 0xe0, 0x00, 0xff, 0x05, 0x07, 0x8e, 0x3d, 0xee, 0xc9, 0xa2,
	0x2e, 0x07, 0xd4, 0xd3, 0x2a, 0x27, 0x24, 0x84, 0x84, 0x3c, 0xb6, 0x13, 0x3b, 0xa5, 0x52, 0xe1,
	0xb2, 0xa7, 0x99, 0x37, 0xef, 0xfb, 0xbe, 0x79, 0xef, 0xcd, 0x78, 0xfc, 0xe0, 0x3c, 0x3b, 0xb1,
	0x4c, 0xbd, 0xbb, 0x12, 0x0c, 0xcb, 0x5d, 0x9b, 0x39, 0x0c, 0x65, 0x03, 0x6b, 0xf1, 0xd1, 0x31,
	0xb5, 0xda, 0xcc, 0x5e, 0x39, 0x34, 0x9c, 0x2f, 0x8f, 0x5a, 0xcb, 0x07, 0xcc, 0x5c, 0x39, 0x64,
	0x87, 0x6c, 0x85, 0xa3, 0x5a, 0x47, 0xcf, 0xb9, 0xc5, 0x0d, 0x3e, 0x0b, 0xd8, 0xe2, 0x9f, 0x00,
	0x4e, 0xa9, 0x0d, 0xa5, 0xce, 0xda, 0x14, 0x3d, 0x86, 0x69, 0xa3, 0x5d, 0x00, 0x45, 0x50, 0xca,
	0x48, 0x0f, 0x3c, 0x17, 0xa7, 0xe5, 0xca, 0xc0, 0xc5, 0xef, 0x76, 0x75, 0xfb, 0xab, 0x23, 0xea,
	0x7c, 0x22, 0x5a, 0xba, 0x49, 0xd7, 0x8d, 0xf6, 0x52, 0xd1, 0xe9, 0x77, 0xe9, 0xba, 0x5c, 0xd7,
	0x3e, 0x7e, 0x24, 0x92, 0xb4, 0xd1, 0x46, 0x4f, 0xe1, 0x84, 0xa3, 0x1f, 0xf6, 0x0a, 0xe9, 0x62,
	0xa6, 0x94, 0x2b, 0xcf, 0x2e, 0x87, 0xf1, 0xa9, 0x0d, 0x45, 0xd3, 0x0f, 0x25, 0x71, 0xe0, 0x62,
	0x21, 0x29, 0xe2, 0xa3, 0x43, 0x99, 0x9a, 0xdc, 0xd0, 0x44, 0xc2, 0xf9, 0xe8, 0x23, 0x98, 0xe9,
	0xe8, 0x4e, 0x21, 0x53, 0x04, 0x25, 0x20, 0xdd, 0x1d, 0xb8, 0x18, 0x27, 0x69, 0x1d, 0xdd, 0x09,
	0x59, 0x15, 0x75, 0x47, 0xaa, 0x55, 0x45, 0xe2, 0xe3, 0x39, 0x8d, 0x59, 0x85, 0x89, 0x6b, 0x69,
	0xcc, 0xba, 0x42, 0x63, 0x96, 0xf8, 0x13, 0x80, 0xd9, 0x20, 0x44, 0xa4, 0xc0, 0xcc, 0x4b, 0xda,
	0xe7, 0xa9, 0xcf, 0x48, 0x9f, 0x0e, 0x5c, 0xfc, 0x38, 0xa9, 0xf0, 0x92, 0xf6, 0x43, 0x05, 0x69,
	0x4f, 0xab, 0x36, 0x37, 0x08, 0xd9, 0xd8, 0x5b, 0x2a, 0x1e, 0x30, 0xeb, 0x98, 0xda, 0x0e, 0x6d,
	0x73, 0xcf, 0x8e, 0xf6, 0xf4, 0x89, 0x48, 0x7c, 0x1d, 0xd4, 0x80, 0x93, 0xc7, 0x7a, 0xe7, 0x88,
	0x16, 0xd2, 0x5c, 0x70, 0x7d, 0xe0, 0xe2, 0xb5, 0xa4, 0x20, 0x77, 0xdf, 0x50, 0x32, 0xd0, 0x12,
	0x4f, 0xe1, 0x74, 0x8d, 0x1d, 0xe8, 0x8e, 0xc1, 0xac, 0xa8, 0x50, 0xe0, 0xff, 0x15, 0x2a, 0xfd,
	0x1f, 0x0b, 0xf5, 0x33, 0x80, 0xd3, 0xbb, 0x7a, 0x7f, 0x9b, 0x19, 0x96, 0x83, 0x08, 0x9c, 0xb2,
	0x58, 0x9b, 0x36, 0x87, 0x37, 0x65, 0xcd, 0x73, 0x71, 0xd6, 0xbf, 0x3f, 0x72, 0xe5, 0xd2, 0xc5,
	0x59, 0xdf, 0x29, 0xb7, 0x07, 0x2e, 0x7e, 0x2f, 0xa9, 0x1d, 0xac, 0x27, 0xef, 0x4e, 0x08, 0x46,
	0x0a, 0x9c, 0xec, 0xfa, 0xe2, 0x3c, 0xb2, 0x5c, 0x39, 0x1f, 0x5d, 0xa0, 0x28, 0x5f, 0xe9, 0xde,
	0x55, 0x3d, 0x4e, 0x08, 0xe5, 0x1a, 0x1a, 0xd9, 0xd9, 0xd4, 0x44, 0x12, 0xa8, 0x88, 0x7f, 0x07,
	0x07, 0xbb, 0xab, 0xf7, 0xdf, 0xfc, 0x95, 0xb6, 0x21, 0x3c, 0xd1, 0xfb, 0x4d, 0x1e, 0x58, 0xaf,
	0x90, 0xe1, 0x6a, 0xc3, 0xfc, 0xa2, 0xa2, 0x4a, 0x1b, 0x9e, 0x8b, 0x67, 0x22, 0xab, 0x77, 0xe9,
	0xe2, 0x99, 0x93, 0xc8, 0x18, 0xb8, 0xf8, 0x6e, 0x72, 0xa7, 0xa1, 0x2b, 0xb1, 0xdd, 0x88, 0x21,
	0xfe, 0x35, 0x09, 0xe7, 0xd4, 0x86, 0x42, 0x68, 0x87, 0x57, 0x4f, 0xa1, 0x66, 0x8b, 0xda, 0xe8,
	0x19, 0x9c, 0x61, 0xad, 0x17, 0xf4, 0xc0, 0x19, 0x1d, 0xdd, 0x67, 0x9e, 0x8b, 0xa7, 0x55, 0xbe,
	0xc8, 0x0f, 0x6f, 0x3a, 0x00, 0xf0, 0xe3, 0x1b, 0xdb, 0x34, 0xf2, 0x24, 0x2b, 0x35, 0x24, 0xa0,
	0xef, 0x01, 0xcc, 0x99, 0x7c, 0xa3, 0xa6, 0x0f, 0xe0, 0x27, 0x39, 0x5b, 0x7e, 0x10, 0xab, 0x5b,
	0x32, 0x1c, 0x7f, 0x25, 0x98, 0x69, 0xfd, 0x2e, 0x95, 0xaa, 0x9e, 0x8b, 0xe1, 0xc8, 0xbe, 0x74,
	0x31, 0x34, 0x87, 0xd6, 0xc0, 0xc5, 0xf7, 0x92, 0xd1, 0x8c, 0x7c, 0xa3, 0x78, 0x56, 0xcb, 0x22,
	0x89, 0x91, 0xd0, 0x17, 0x70, 0xc2, 0x66, 0x1d, 0xca, 0x5f, 0x93, 0x19, 0xc9, 0x4f, 0x8f, 0xdb,
	0x03, 0x17, 0x3f, 0x49, 0x8a, 0xf9, 0xab, 0x37, 0xfc, 0x14, 0xb9, 0x02, 0xfa, 0x16, 0xc0, 0x1c,
	0xb3, 0x0d, 0x6a, 0x39, 0x3c, 0x21, 0xfe, 0xf0, 0xcc, 0x96, 0x97, 0x6f, 0x90, 0xab, 0x3a, 0x62,
	0x49, 0x6b, 0x97, 0x2e, 0x8e, 0xcb, 0x0c, 0x5c, 0x7c, 0x7f, 0xac, 0xe6, 0x23, 0x67, 0x32, 0xcd,
	0x38, 0x4d, 0xfc, 0x1a, 0xbe, 0x95, 0xa8, 0x25, 0x7a, 0x1b, 0xde, 0x56, 0x1b, 0x4a, 0x53, 0xa9,
	0x2a, 0x52, 0x95, 0x34, 0xb5, 0xbd, 0xed, 0x6a, 0x73, 0xa7, 0xbe, 0x55, 0x57, 0x77, 0xeb, 0xf9,
	0x14, 0x2a, 0xc0, 0x85, 0x71, 0x67, 0x5d, 0xad, 0x54, 0xf3, 0x00, 0xdd, 0x86, 0xf3, 0xe3, 0x9e,
	0xdd, 0x8d, 0xbd, 0x7c, 0x1a, 0xbd, 0x03, 0x0b, 0xe3, 0x0e, 0x52, 0xad, 0x6d, 0x68, 0xb2, 0x5a,
	0xcf, 0x67, 0xc4, 0xef, 0x00, 0x57, 0xbc, 0x92, 0x1f, 0x12, 0xa1, 0x10, 0xa3, 0xa9, 0x44, 0xae,
	0xd6, 0x35, 0x4e, 0x8a, 0x45, 0xf3, 0x3e, 0x2c, 0x5e, 0x83, 0xd9, 0xac, 0xa9, 0x9b, 0x5b, 0xbb,
	0x72, 0xc3, 0x8f, 0x6c, 0x09, 0x96, 0xae, 0x43, 0xa9, 0x3b, 0x75, 0xad, 0x4a, 0x62, 0xe8, 0xb4,
	0x78, 0x09, 0x60, 0x2e, 0x76, 0x04, 0x6f, 0xfe, 0x09, 0xd8, 0x87, 0x53, 0xc1, 0xb5, 0x8c, 0xbe,
	0xff, 0x3b, 0xd7, 0xde, 0x94, 0x7f, 0x7b, 0xe8, 0x42, 0x6e, 0x42, 0x38, 0x12, 0x14, 0x4b, 0x30,
	0x27, 0x5b, 0x6d, 0x7a, 0x2a, 0x57, 0x6a, 0x46, 0xcf, 0x41, 0x77, 0x60, 0xc6, 0x68, 0xf7, 0x0a,
	0xa0, 0x98, 0x29, 0x65, 0xa4, 0x29, 0xcf, 0xc5, 0x19, 0xb9, 0xd2, 0x23, 0xfe, 0x9a, 0xf8, 0x7b,
	0x1a, 0xe6, 0x2a, 0xba, 0xa3, 0xf7, 0xa8, 0x23, 0x5b, 0xcf, 0x19, 0x2a, 0xc3, 0x6c, 0x8b, 0x1d,
	0x59, 0x1c, 0xed, 0x3f, 0xba, 0x8b, 0x51, 0x50, 0x31, 0xd0, 0xb2, 0xc4, 0x11, 0x24, 0x44, 0xa2,
	0x7d, 0x38, 0x6f, 0xd3, 0x6e, 0xc7, 0x08, 0x5e, 0xe5, 0xa6, 0x63, 0x98, 0xb4, 0x69, 0xf6, 0xf8,
	0xb7, 0x3e, 0x21, 0x7d, 0xe0, 0xb9, 0x78, 0x8e, 0x8c, 0xdc, 0x9a, 0x61, 0x52, 0xc5, 0x7f, 0xcb,
	0xe6, 0xec, 0xf1, 0x45, 0x72, 0x75, 0x69, 0xf1, 0x17, 0x00, 0xb3, 0xc1, 0x76, 0xe8, 0x21, 0x9c,
	0x32, 0x0d, 0xab, 0x39, 0xfa, 0xc3, 0x2d, 0xf8, 0xbf, 0x18, 0xc5, 0xb0, 0x6a, 0xba, 0xe3, 0xff,
	0x62, 0x4c, 0x3e, 0x23, 0xe1, 0xc8, 0xe1, 0xfa, 0x29, 0x87, 0xa7, 0x63, 0x70, 0xfd, 0x34, 0x82,
	0xf3, 0x19, 0x09, 0xc7, 0xa1, 0x3a, 0xb3, 0xc2, 0x46, 0x63, 0xa8, 0xce, 0xac, 0x48, 0x9d, 0x59,
	0x24, 0x1c, 0x87, 0xea, 0xc3, 0x06, 0x63, 0xa8, 0x1e, 0xc2, 0xf9, 0x8c, 0x84, 0xa3, 0xf8, 0x21,
	0xcc, 0x6e, 0x7d, 0xbe, 0xad, 0x1b, 0x36, 0xca, 0x8f, 0x7a, 0x8a, 0x5b, 0x41, 0x5b, 0xb0, 0x10,
	0x6f, 0x0b, 0x6e, 0x85, 0xff, 0x75, 0xe9, 0xd9, 0xd9, 0xb9, 0x90, 0x7a, 0x75, 0x2e, 0xa4, 0x5e,
	0x9f, 0x0b, 0xe0, 0x1b, 0x4f, 0x00, 0x3f, 0x7a, 0x02, 0xf8, 0xd5, 0x13, 0xc0, 0x99, 0x27, 0x80,
	0xdf, 0x3c, 0x01, 0xfc, 0xe1, 0x09, 0xa9, 0xd7, 0x9e, 0x00, 0x7e, 0xb8, 0x10, 0x52, 0x67, 0x17,
	0x42, 0xea, 0xd5, 0x85, 0x90, 0xda, 0xbf, 0x1f, 0x6b, 0xf3, 0x5e, 0xe8, 0x26, 0xed, 0xd9, 0xf6,
	0xea, 0x5a, 0xd8, 0x18, 0x3e, 0xd4, 0xbb, 0x51, 0x8f, 0xd8, 0xca, 0xf2, 0x36, 0x6f, 0xf5, 0x9f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x70, 0x53, 0x07, 0xe3, 0x3b, 0x0a, 0x00, 0x00,
}

func (x OSMRelationMember_OSMMemberType) String() string {
	s, ok := OSMRelationMember_OSMMemberType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x OSMRelationMember_OSMMemberOrientation) String() string {
	s, ok := OSMRelationMember_OSMMemberOrientation_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *OSMNode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OSMNode)
	if !ok {
		that2, ok := that.(OSMNode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if !this.Tags[i].Equal(that1.Tags[i]) {
			return false
		}
	}
	if this.Lat != that1.Lat {
		return false
	}
	if this.Lon != that1.Lon {
		return false
	}
	return true
}
func (this *OSMTag) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OSMTag)
	if !ok {
		that2, ok := that.(OSMTag)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *Location) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Location)
	if !ok {
		that2, ok := that.(Location)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Lat != that1.Lat {
		return false
	}
	if this.Lon != that1.Lon {
		return false
	}
	return true
}
func (this *WayPoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WayPoint)
	if !ok {
		that2, ok := that.(WayPoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if !this.Point.Equal(that1.Point) {
		return false
	}
	return true
}
func (this *OSMWay) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OSMWay)
	if !ok {
		that2, ok := that.(OSMWay)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if !this.Tags[i].Equal(that1.Tags[i]) {
			return false
		}
	}
	if len(this.WayPoints) != len(that1.WayPoints) {
		return false
	}
	for i := range this.WayPoints {
		if !this.WayPoints[i].Equal(that1.WayPoints[i]) {
			return false
		}
	}
	return true
}
func (this *OSMRelationMember) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OSMRelationMember)
	if !ok {
		that2, ok := that.(OSMRelationMember)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ObjectID != that1.ObjectID {
		return false
	}
	if this.MemberType != that1.MemberType {
		return false
	}
	if this.Role != that1.Role {
		return false
	}
	if this.Orientation != that1.Orientation {
		return false
	}
	return true
}
func (this *OSMRelation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OSMRelation)
	if !ok {
		that2, ok := that.(OSMRelation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if !this.Tags[i].Equal(that1.Tags[i]) {
			return false
		}
	}
	if len(this.Members) != len(that1.Members) {
		return false
	}
	for i := range this.Members {
		if !this.Members[i].Equal(that1.Members[i]) {
			return false
		}
	}
	return true
}
func (this *IndexIDList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IndexIDList)
	if !ok {
		that2, ok := that.(IndexIDList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.IDs) != len(that1.IDs) {
		return false
	}
	for i := range this.IDs {
		if this.IDs[i] != that1.IDs[i] {
			return false
		}
	}
	return true
}
func (this *DatasetInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DatasetInfo)
	if !ok {
		that2, ok := that.(DatasetInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Bounds.Equal(that1.Bounds) {
		return false
	}
	if this.ReplicationTimeMs != that1.ReplicationTimeMs {
		return false
	}
	return true
}
func (this *DatasetInfo_Bounds) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DatasetInfo_Bounds)
	if !ok {
		that2, ok := that.(DatasetInfo_Bounds)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinLat != that1.MinLat {
		return false
	}
	if this.MaxLat != that1.MaxLat {
		return false
	}
	if this.MinLon != that1.MinLon {
		return false
	}
	if this.MaxLon != that1.MaxLon {
		return false
	}
	return true
}
func (this *KVPair) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KVPair)
	if !ok {
		that2, ok := that.(KVPair)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Key, that1.Key) {
		return false
	}
	if !bytes.Equal(this.Value, that1.Value) {
		return false
	}
	return true
}
func (this *OSMNode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&ownmap.OSMNode{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	if this.Tags != nil {
		s = append(s, "Tags: "+fmt.Sprintf("%#v", this.Tags)+",\n")
	}
	s = append(s, "Lat: "+fmt.Sprintf("%#v", this.Lat)+",\n")
	s = append(s, "Lon: "+fmt.Sprintf("%#v", this.Lon)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OSMTag) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ownmap.OSMTag{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Location) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ownmap.Location{")
	s = append(s, "Lat: "+fmt.Sprintf("%#v", this.Lat)+",\n")
	s = append(s, "Lon: "+fmt.Sprintf("%#v", this.Lon)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WayPoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ownmap.WayPoint{")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	if this.Point != nil {
		s = append(s, "Point: "+fmt.Sprintf("%#v", this.Point)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OSMWay) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ownmap.OSMWay{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	if this.Tags != nil {
		s = append(s, "Tags: "+fmt.Sprintf("%#v", this.Tags)+",\n")
	}
	if this.WayPoints != nil {
		s = append(s, "WayPoints: "+fmt.Sprintf("%#v", this.WayPoints)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OSMRelationMember) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&ownmap.OSMRelationMember{")
	s = append(s, "ObjectID: "+fmt.Sprintf("%#v", this.ObjectID)+",\n")
	s = append(s, "MemberType: "+fmt.Sprintf("%#v", this.MemberType)+",\n")
	s = append(s, "Role: "+fmt.Sprintf("%#v", this.Role)+",\n")
	s = append(s, "Orientation: "+fmt.Sprintf("%#v", this.Orientation)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OSMRelation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&ownmap.OSMRelation{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	if this.Tags != nil {
		s = append(s, "Tags: "+fmt.Sprintf("%#v", this.Tags)+",\n")
	}
	if this.Members != nil {
		s = append(s, "Members: "+fmt.Sprintf("%#v", this.Members)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IndexIDList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ownmap.IndexIDList{")
	s = append(s, "IDs: "+fmt.Sprintf("%#v", this.IDs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DatasetInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ownmap.DatasetInfo{")
	if this.Bounds != nil {
		s = append(s, "Bounds: "+fmt.Sprintf("%#v", this.Bounds)+",\n")
	}
	s = append(s, "ReplicationTimeMs: "+fmt.Sprintf("%#v", this.ReplicationTimeMs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DatasetInfo_Bounds) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&ownmap.DatasetInfo_Bounds{")
	s = append(s, "MinLat: "+fmt.Sprintf("%#v", this.MinLat)+",\n")
	s = append(s, "MaxLat: "+fmt.Sprintf("%#v", this.MaxLat)+",\n")
	s = append(s, "MinLon: "+fmt.Sprintf("%#v", this.MinLon)+",\n")
	s = append(s, "MaxLon: "+fmt.Sprintf("%#v", this.MaxLon)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *KVPair) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&ownmap.KVPair{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringOwnmap(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *OSMNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSMNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OSMNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Lon != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lon))))
		i--
		dAtA[i] = 0x21
	}
	if m.Lat != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lat))))
		i--
		dAtA[i] = 0x19
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tags[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOwnmap(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ID != 0 {
		i = encodeVarintOwnmap(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OSMTag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSMTag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OSMTag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintOwnmap(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintOwnmap(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Location) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Location) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Location) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Lon != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lon))))
		i--
		dAtA[i] = 0x11
	}
	if m.Lat != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lat))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *WayPoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WayPoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WayPoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Point != nil {
		{
			size, err := m.Point.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOwnmap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.NodeID != 0 {
		i = encodeVarintOwnmap(dAtA, i, uint64(m.NodeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OSMWay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSMWay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OSMWay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WayPoints) > 0 {
		for iNdEx := len(m.WayPoints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WayPoints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOwnmap(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tags[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOwnmap(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ID != 0 {
		i = encodeVarintOwnmap(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OSMRelationMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSMRelationMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OSMRelationMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Orientation != 0 {
		i = encodeVarintOwnmap(dAtA, i, uint64(m.Orientation))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Role) > 0 {
		i -= len(m.Role)
		copy(dAtA[i:], m.Role)
		i = encodeVarintOwnmap(dAtA, i, uint64(len(m.Role)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MemberType != 0 {
		i = encodeVarintOwnmap(dAtA, i, uint64(m.MemberType))
		i--
		dAtA[i] = 0x10
	}
	if m.ObjectID != 0 {
		i = encodeVarintOwnmap(dAtA, i, uint64(m.ObjectID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OSMRelation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSMRelation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OSMRelation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOwnmap(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tags[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOwnmap(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ID != 0 {
		i = encodeVarintOwnmap(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IndexIDList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexIDList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexIDList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IDs) > 0 {
		dAtA3 := make([]byte, len(m.IDs)*10)
		var j2 int
		for _, num1 := range m.IDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintOwnmap(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DatasetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DatasetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DatasetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReplicationTimeMs != 0 {
		i = encodeVarintOwnmap(dAtA, i, uint64(m.ReplicationTimeMs))
		i--
		dAtA[i] = 0x10
	}
	if m.Bounds != nil {
		{
			size, err := m.Bounds.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOwnmap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DatasetInfo_Bounds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DatasetInfo_Bounds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DatasetInfo_Bounds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxLon != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxLon))))
		i--
		dAtA[i] = 0x21
	}
	if m.MinLon != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MinLon))))
		i--
		dAtA[i] = 0x19
	}
	if m.MaxLat != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxLat))))
		i--
		dAtA[i] = 0x11
	}
	if m.MinLat != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MinLat))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *KVPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KVPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KVPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintOwnmap(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintOwnmap(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOwnmap(dAtA []byte, offset int, v uint64) int {
	offset -= sovOwnmap(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OSMNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovOwnmap(uint64(m.ID))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovOwnmap(uint64(l))
		}
	}
	if m.Lat != 0 {
		n += 9
	}
	if m.Lon != 0 {
		n += 9
	}
	return n
}

func (m *OSMTag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovOwnmap(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovOwnmap(uint64(l))
	}
	return n
}

func (m *Location) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lat != 0 {
		n += 9
	}
	if m.Lon != 0 {
		n += 9
	}
	return n
}

func (m *WayPoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovOwnmap(uint64(m.NodeID))
	}
	if m.Point != nil {
		l = m.Point.Size()
		n += 1 + l + sovOwnmap(uint64(l))
	}
	return n
}

func (m *OSMWay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovOwnmap(uint64(m.ID))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovOwnmap(uint64(l))
		}
	}
	if len(m.WayPoints) > 0 {
		for _, e := range m.WayPoints {
			l = e.Size()
			n += 1 + l + sovOwnmap(uint64(l))
		}
	}
	return n
}

func (m *OSMRelationMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ObjectID != 0 {
		n += 1 + sovOwnmap(uint64(m.ObjectID))
	}
	if m.MemberType != 0 {
		n += 1 + sovOwnmap(uint64(m.MemberType))
	}
	l = len(m.Role)
	if l > 0 {
		n += 1 + l + sovOwnmap(uint64(l))
	}
	if m.Orientation != 0 {
		n += 1 + sovOwnmap(uint64(m.Orientation))
	}
	return n
}

func (m *OSMRelation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovOwnmap(uint64(m.ID))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovOwnmap(uint64(l))
		}
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovOwnmap(uint64(l))
		}
	}
	return n
}

func (m *IndexIDList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IDs) > 0 {
		l = 0
		for _, e := range m.IDs {
			l += sovOwnmap(uint64(e))
		}
		n += 1 + sovOwnmap(uint64(l)) + l
	}
	return n
}

func (m *DatasetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bounds != nil {
		l = m.Bounds.Size()
		n += 1 + l + sovOwnmap(uint64(l))
	}
	if m.ReplicationTimeMs != 0 {
		n += 1 + sovOwnmap(uint64(m.ReplicationTimeMs))
	}
	return n
}

func (m *DatasetInfo_Bounds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinLat != 0 {
		n += 9
	}
	if m.MaxLat != 0 {
		n += 9
	}
	if m.MinLon != 0 {
		n += 9
	}
	if m.MaxLon != 0 {
		n += 9
	}
	return n
}

func (m *KVPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovOwnmap(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovOwnmap(uint64(l))
	}
	return n
}

func sovOwnmap(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOwnmap(x uint64) (n int) {
	return sovOwnmap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *OSMNode) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTags := "[]*OSMTag{"
	for _, f := range this.Tags {
		repeatedStringForTags += strings.Replace(f.String(), "OSMTag", "OSMTag", 1) + ","
	}
	repeatedStringForTags += "}"
	s := strings.Join([]string{`&OSMNode{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Tags:` + repeatedStringForTags + `,`,
		`Lat:` + fmt.Sprintf("%v", this.Lat) + `,`,
		`Lon:` + fmt.Sprintf("%v", this.Lon) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OSMTag) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OSMTag{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Location) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Location{`,
		`Lat:` + fmt.Sprintf("%v", this.Lat) + `,`,
		`Lon:` + fmt.Sprintf("%v", this.Lon) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WayPoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WayPoint{`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`Point:` + strings.Replace(this.Point.String(), "Location", "Location", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OSMWay) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTags := "[]*OSMTag{"
	for _, f := range this.Tags {
		repeatedStringForTags += strings.Replace(f.String(), "OSMTag", "OSMTag", 1) + ","
	}
	repeatedStringForTags += "}"
	repeatedStringForWayPoints := "[]*WayPoint{"
	for _, f := range this.WayPoints {
		repeatedStringForWayPoints += strings.Replace(f.String(), "WayPoint", "WayPoint", 1) + ","
	}
	repeatedStringForWayPoints += "}"
	s := strings.Join([]string{`&OSMWay{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Tags:` + repeatedStringForTags + `,`,
		`WayPoints:` + repeatedStringForWayPoints + `,`,
		`}`,
	}, "")
	return s
}
func (this *OSMRelationMember) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OSMRelationMember{`,
		`ObjectID:` + fmt.Sprintf("%v", this.ObjectID) + `,`,
		`MemberType:` + fmt.Sprintf("%v", this.MemberType) + `,`,
		`Role:` + fmt.Sprintf("%v", this.Role) + `,`,
		`Orientation:` + fmt.Sprintf("%v", this.Orientation) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OSMRelation) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTags := "[]*OSMTag{"
	for _, f := range this.Tags {
		repeatedStringForTags += strings.Replace(f.String(), "OSMTag", "OSMTag", 1) + ","
	}
	repeatedStringForTags += "}"
	repeatedStringForMembers := "[]*OSMRelationMember{"
	for _, f := range this.Members {
		repeatedStringForMembers += strings.Replace(f.String(), "OSMRelationMember", "OSMRelationMember", 1) + ","
	}
	repeatedStringForMembers += "}"
	s := strings.Join([]string{`&OSMRelation{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Tags:` + repeatedStringForTags + `,`,
		`Members:` + repeatedStringForMembers + `,`,
		`}`,
	}, "")
	return s
}
func (this *IndexIDList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IndexIDList{`,
		`IDs:` + fmt.Sprintf("%v", this.IDs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DatasetInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DatasetInfo{`,
		`Bounds:` + strings.Replace(fmt.Sprintf("%v", this.Bounds), "DatasetInfo_Bounds", "DatasetInfo_Bounds", 1) + `,`,
		`ReplicationTimeMs:` + fmt.Sprintf("%v", this.ReplicationTimeMs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DatasetInfo_Bounds) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DatasetInfo_Bounds{`,
		`MinLat:` + fmt.Sprintf("%v", this.MinLat) + `,`,
		`MaxLat:` + fmt.Sprintf("%v", this.MaxLat) + `,`,
		`MinLon:` + fmt.Sprintf("%v", this.MinLon) + `,`,
		`MaxLon:` + fmt.Sprintf("%v", this.MaxLon) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KVPair) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KVPair{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringOwnmap(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *OSMNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOwnmap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSMNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSMNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwnmap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwnmap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOwnmap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOwnmap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &OSMTag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lat = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lon", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lon = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipOwnmap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOwnmap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSMTag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOwnmap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSMTag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSMTag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwnmap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOwnmap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOwnmap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwnmap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOwnmap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOwnmap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOwnmap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOwnmap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Location) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOwnmap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Location: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Location: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lat = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lon", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lon = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipOwnmap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOwnmap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WayPoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOwnmap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WayPoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WayPoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwnmap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwnmap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOwnmap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOwnmap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Point == nil {
				m.Point = &Location{}
			}
			if err := m.Point.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOwnmap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOwnmap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSMWay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOwnmap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSMWay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSMWay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwnmap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwnmap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOwnmap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOwnmap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &OSMTag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WayPoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwnmap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOwnmap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOwnmap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WayPoints = append(m.WayPoints, &WayPoint{})
			if err := m.WayPoints[len(m.WayPoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOwnmap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOwnmap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSMRelationMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOwnmap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSMRelationMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSMRelationMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectID", wireType)
			}
			m.ObjectID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwnmap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjectID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberType", wireType)
			}
			m.MemberType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwnmap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemberType |= OSMRelationMember_OSMMemberType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwnmap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOwnmap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOwnmap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orientation", wireType)
			}
			m.Orientation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwnmap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Orientation |= OSMRelationMember_OSMMemberOrientation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOwnmap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOwnmap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSMRelation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOwnmap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSMRelation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSMRelation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwnmap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwnmap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOwnmap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOwnmap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &OSMTag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwnmap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOwnmap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOwnmap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &OSMRelationMember{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOwnmap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOwnmap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexIDList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOwnmap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexIDList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexIDList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOwnmap
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IDs = append(m.IDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOwnmap
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthOwnmap
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthOwnmap
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.IDs) == 0 {
					m.IDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOwnmap
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IDs = append(m.IDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOwnmap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOwnmap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DatasetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOwnmap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DatasetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DatasetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bounds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwnmap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOwnmap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOwnmap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bounds == nil {
				m.Bounds = &DatasetInfo_Bounds{}
			}
			if err := m.Bounds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationTimeMs", wireType)
			}
			m.ReplicationTimeMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwnmap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicationTimeMs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOwnmap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOwnmap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DatasetInfo_Bounds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOwnmap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bounds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bounds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLat", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MinLat = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLat", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxLat = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLon", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MinLon = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLon", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxLon = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipOwnmap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOwnmap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KVPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOwnmap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KVPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KVPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwnmap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOwnmap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOwnmap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOwnmap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOwnmap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOwnmap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOwnmap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOwnmap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOwnmap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOwnmap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOwnmap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOwnmap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOwnmap
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOwnmap
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOwnmap
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOwnmap        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOwnmap          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOwnmap = fmt.Errorf("proto: unexpected end of group")
)
