// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: osm.proto

package osmpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Relation_MemberType int32

const (
	Relation_NODE     Relation_MemberType = 0
	Relation_WAY      Relation_MemberType = 1
	Relation_RELATION Relation_MemberType = 2
)

// Enum value maps for Relation_MemberType.
var (
	Relation_MemberType_name = map[int32]string{
		0: "NODE",
		1: "WAY",
		2: "RELATION",
	}
	Relation_MemberType_value = map[string]int32{
		"NODE":     0,
		"WAY":      1,
		"RELATION": 2,
	}
)

func (x Relation_MemberType) Enum() *Relation_MemberType {
	p := new(Relation_MemberType)
	*p = x
	return p
}

func (x Relation_MemberType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Relation_MemberType) Descriptor() protoreflect.EnumDescriptor {
	return file_osm_proto_enumTypes[0].Descriptor()
}

func (Relation_MemberType) Type() protoreflect.EnumType {
	return &file_osm_proto_enumTypes[0]
}

func (x Relation_MemberType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Relation_MemberType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Relation_MemberType(num)
	return nil
}

// Deprecated: Use Relation_MemberType.Descriptor instead.
func (Relation_MemberType) EnumDescriptor() ([]byte, []int) {
	return file_osm_proto_rawDescGZIP(), []int{10, 0}
}

type Changeset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Parallel arrays.
	Keys      []uint32 `protobuf:"varint,2,rep,packed,name=keys" json:"keys,omitempty"`
	Vals      []uint32 `protobuf:"varint,3,rep,packed,name=vals" json:"vals,omitempty"`
	UserId    *int32   `protobuf:"varint,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	UserSid   *uint32  `protobuf:"varint,6,opt,name=user_sid,json=userSid" json:"user_sid,omitempty"`
	CreatedAt *int64   `protobuf:"varint,7,opt,name=created_at,json=createdAt" json:"created_at,omitempty"` // epoch time
	ClosedAt  *int64   `protobuf:"varint,8,opt,name=closed_at,json=closedAt" json:"closed_at,omitempty"`    // epoch time
	Open      *bool    `protobuf:"varint,9,opt,name=open" json:"open,omitempty"`
	Bounds    *Bounds  `protobuf:"bytes,10,opt,name=bounds" json:"bounds,omitempty"`
	Change    *Change  `protobuf:"bytes,11,opt,name=change" json:"change,omitempty"`
	// contains the tag strings for everything
	// in this entire changeset.
	Strings []string `protobuf:"bytes,20,rep,name=strings" json:"strings,omitempty"`
}

func (x *Changeset) Reset() {
	*x = Changeset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_osm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Changeset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Changeset) ProtoMessage() {}

func (x *Changeset) ProtoReflect() protoreflect.Message {
	mi := &file_osm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Changeset.ProtoReflect.Descriptor instead.
func (*Changeset) Descriptor() ([]byte, []int) {
	return file_osm_proto_rawDescGZIP(), []int{0}
}

func (x *Changeset) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Changeset) GetKeys() []uint32 {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *Changeset) GetVals() []uint32 {
	if x != nil {
		return x.Vals
	}
	return nil
}

func (x *Changeset) GetUserId() int32 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *Changeset) GetUserSid() uint32 {
	if x != nil && x.UserSid != nil {
		return *x.UserSid
	}
	return 0
}

func (x *Changeset) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *Changeset) GetClosedAt() int64 {
	if x != nil && x.ClosedAt != nil {
		return *x.ClosedAt
	}
	return 0
}

func (x *Changeset) GetOpen() bool {
	if x != nil && x.Open != nil {
		return *x.Open
	}
	return false
}

func (x *Changeset) GetBounds() *Bounds {
	if x != nil {
		return x.Bounds
	}
	return nil
}

func (x *Changeset) GetChange() *Change {
	if x != nil {
		return x.Change
	}
	return nil
}

func (x *Changeset) GetStrings() []string {
	if x != nil {
		return x.Strings
	}
	return nil
}

type Bounds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinLon *int64 `protobuf:"zigzag64,1,req,name=min_lon,json=minLon" json:"min_lon,omitempty"`
	MaxLon *int64 `protobuf:"zigzag64,2,req,name=max_lon,json=maxLon" json:"max_lon,omitempty"`
	MinLat *int64 `protobuf:"zigzag64,3,req,name=min_lat,json=minLat" json:"min_lat,omitempty"`
	MaxLat *int64 `protobuf:"zigzag64,4,req,name=max_lat,json=maxLat" json:"max_lat,omitempty"`
}

func (x *Bounds) Reset() {
	*x = Bounds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_osm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bounds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bounds) ProtoMessage() {}

func (x *Bounds) ProtoReflect() protoreflect.Message {
	mi := &file_osm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bounds.ProtoReflect.Descriptor instead.
func (*Bounds) Descriptor() ([]byte, []int) {
	return file_osm_proto_rawDescGZIP(), []int{1}
}

func (x *Bounds) GetMinLon() int64 {
	if x != nil && x.MinLon != nil {
		return *x.MinLon
	}
	return 0
}

func (x *Bounds) GetMaxLon() int64 {
	if x != nil && x.MaxLon != nil {
		return *x.MaxLon
	}
	return 0
}

func (x *Bounds) GetMinLat() int64 {
	if x != nil && x.MinLat != nil {
		return *x.MinLat
	}
	return 0
}

func (x *Bounds) GetMaxLat() int64 {
	if x != nil && x.MaxLat != nil {
		return *x.MaxLat
	}
	return 0
}

type Change struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Create *OSM `protobuf:"bytes,1,opt,name=create" json:"create,omitempty"`
	Modify *OSM `protobuf:"bytes,2,opt,name=modify" json:"modify,omitempty"`
	Delete *OSM `protobuf:"bytes,3,opt,name=delete" json:"delete,omitempty"`
	// elements that give the change extra context like
	// nodes of the ways, and previous versions.
	Context *OSM `protobuf:"bytes,4,opt,name=context" json:"context,omitempty"`
	// contains the tag strings if this is the root of the data.
	Strings []string `protobuf:"bytes,20,rep,name=strings" json:"strings,omitempty"`
}

func (x *Change) Reset() {
	*x = Change{}
	if protoimpl.UnsafeEnabled {
		mi := &file_osm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Change) ProtoMessage() {}

func (x *Change) ProtoReflect() protoreflect.Message {
	mi := &file_osm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Change.ProtoReflect.Descriptor instead.
func (*Change) Descriptor() ([]byte, []int) {
	return file_osm_proto_rawDescGZIP(), []int{2}
}

func (x *Change) GetCreate() *OSM {
	if x != nil {
		return x.Create
	}
	return nil
}

func (x *Change) GetModify() *OSM {
	if x != nil {
		return x.Modify
	}
	return nil
}

func (x *Change) GetDelete() *OSM {
	if x != nil {
		return x.Delete
	}
	return nil
}

func (x *Change) GetContext() *OSM {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Change) GetStrings() []string {
	if x != nil {
		return x.Strings
	}
	return nil
}

type Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// encoded as [key1, val1, key2, val2, etc.]
	KeysVals []string `protobuf:"bytes,1,rep,name=keys_vals,json=keysVals" json:"keys_vals,omitempty"`
}

func (x *Tags) Reset() {
	*x = Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_osm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tags) ProtoMessage() {}

func (x *Tags) ProtoReflect() protoreflect.Message {
	mi := &file_osm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tags.ProtoReflect.Descriptor instead.
func (*Tags) Descriptor() ([]byte, []int) {
	return file_osm_proto_rawDescGZIP(), []int{3}
}

func (x *Tags) GetKeysVals() []string {
	if x != nil {
		return x.KeysVals
	}
	return nil
}

type OSM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bounds *Bounds `protobuf:"bytes,1,opt,name=bounds" json:"bounds,omitempty"`
	// an encoded should have either nodes or a dense_nodes, but not both.
	Nodes      []*Node     `protobuf:"bytes,2,rep,name=nodes" json:"nodes,omitempty"`
	DenseNodes *DenseNodes `protobuf:"bytes,3,opt,name=dense_nodes,json=denseNodes" json:"dense_nodes,omitempty"`
	Ways       []*Way      `protobuf:"bytes,4,rep,name=ways" json:"ways,omitempty"`
	Relations  []*Relation `protobuf:"bytes,5,rep,name=relations" json:"relations,omitempty"`
	// contains the tag strings if this is the root of the data.
	Strings []string `protobuf:"bytes,15,rep,name=strings" json:"strings,omitempty"`
}

func (x *OSM) Reset() {
	*x = OSM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_osm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OSM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSM) ProtoMessage() {}

func (x *OSM) ProtoReflect() protoreflect.Message {
	mi := &file_osm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSM.ProtoReflect.Descriptor instead.
func (*OSM) Descriptor() ([]byte, []int) {
	return file_osm_proto_rawDescGZIP(), []int{4}
}

func (x *OSM) GetBounds() *Bounds {
	if x != nil {
		return x.Bounds
	}
	return nil
}

func (x *OSM) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *OSM) GetDenseNodes() *DenseNodes {
	if x != nil {
		return x.DenseNodes
	}
	return nil
}

func (x *OSM) GetWays() []*Way {
	if x != nil {
		return x.Ways
	}
	return nil
}

func (x *OSM) GetRelations() []*Relation {
	if x != nil {
		return x.Relations
	}
	return nil
}

func (x *OSM) GetStrings() []string {
	if x != nil {
		return x.Strings
	}
	return nil
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *int64 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// Parallel arrays.
	Keys []uint32 `protobuf:"varint,2,rep,packed,name=keys" json:"keys,omitempty"` // String IDs.
	Vals []uint32 `protobuf:"varint,3,rep,packed,name=vals" json:"vals,omitempty"` // String IDs.
	Info *Info    `protobuf:"bytes,4,opt,name=info" json:"info,omitempty"`
	Lat  *int64   `protobuf:"zigzag64,8,req,name=lat" json:"lat,omitempty"`
	Lon  *int64   `protobuf:"zigzag64,9,req,name=lon" json:"lon,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_osm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_osm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_osm_proto_rawDescGZIP(), []int{5}
}

func (x *Node) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Node) GetKeys() []uint32 {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *Node) GetVals() []uint32 {
	if x != nil {
		return x.Vals
	}
	return nil
}

func (x *Node) GetInfo() *Info {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Node) GetLat() int64 {
	if x != nil && x.Lat != nil {
		return *x.Lat
	}
	return 0
}

func (x *Node) GetLon() int64 {
	if x != nil && x.Lon != nil {
		return *x.Lon
	}
	return 0
}

type Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   *int32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Timestamp *int64 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"` // Epoch
	// these can be omitted if the object represents one changeset
	// since they will be all the same. However tests on 200k changesets
	// show this saves about 17 bytes per changeset on average after gzip.
	ChangesetId *int64  `protobuf:"varint,3,opt,name=changeset_id,json=changesetId" json:"changeset_id,omitempty"`
	UserId      *int32  `protobuf:"varint,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	UserSid     *uint32 `protobuf:"varint,5,opt,name=user_sid,json=userSid" json:"user_sid,omitempty"` // String ID
	// The visible flag is used to store history information. It indicates that
	// the current object version has been created by a delete operation on the
	// OSM API. This info may be omitted if it can be inferred from its group
	// ie. create, modify, delete.
	Visible *bool `protobuf:"varint,6,opt,name=visible" json:"visible,omitempty"`
	// the time this element was committed into the db. Could be much later than
	// timestamp for large uploads.
	Committed *int64 `protobuf:"varint,7,opt,name=committed" json:"committed,omitempty"` // Epoch
}

func (x *Info) Reset() {
	*x = Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_osm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Info) ProtoMessage() {}

func (x *Info) ProtoReflect() protoreflect.Message {
	mi := &file_osm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Info.ProtoReflect.Descriptor instead.
func (*Info) Descriptor() ([]byte, []int) {
	return file_osm_proto_rawDescGZIP(), []int{6}
}

func (x *Info) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *Info) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *Info) GetChangesetId() int64 {
	if x != nil && x.ChangesetId != nil {
		return *x.ChangesetId
	}
	return 0
}

func (x *Info) GetUserId() int32 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *Info) GetUserSid() uint32 {
	if x != nil && x.UserSid != nil {
		return *x.UserSid
	}
	return 0
}

func (x *Info) GetVisible() bool {
	if x != nil && x.Visible != nil {
		return *x.Visible
	}
	return false
}

func (x *Info) GetCommitted() int64 {
	if x != nil && x.Committed != nil {
		return *x.Committed
	}
	return 0
}

type DenseNodes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids       []int64    `protobuf:"zigzag64,1,rep,packed,name=ids" json:"ids,omitempty"` // DELTA coded
	DenseInfo *DenseInfo `protobuf:"bytes,5,opt,name=dense_info,json=denseInfo" json:"dense_info,omitempty"`
	Lats      []int64    `protobuf:"zigzag64,8,rep,packed,name=lats" json:"lats,omitempty"` // DELTA coded
	Lons      []int64    `protobuf:"zigzag64,9,rep,packed,name=lons" json:"lons,omitempty"` // DELTA coded
	// Special packing of keys and vals into one array. We use a single stringid
	// of 0 to delimit when the tags of a node ends and the tags of the next node
	// begin. The storage pattern is: ((<keyid> <valid>)* '0' )* As an exception,
	// if no node in the current block has any key/value pairs, this array does
	// not contain any delimiters, but is simply empty.
	KeysVals []uint32 `protobuf:"varint,10,rep,packed,name=keys_vals,json=keysVals" json:"keys_vals,omitempty"`
	Strings  []string `protobuf:"bytes,15,rep,name=strings" json:"strings,omitempty"` // NOTE: id less than 16 encodes as 2 less bytes.
}

func (x *DenseNodes) Reset() {
	*x = DenseNodes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_osm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DenseNodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DenseNodes) ProtoMessage() {}

func (x *DenseNodes) ProtoReflect() protoreflect.Message {
	mi := &file_osm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DenseNodes.ProtoReflect.Descriptor instead.
func (*DenseNodes) Descriptor() ([]byte, []int) {
	return file_osm_proto_rawDescGZIP(), []int{7}
}

func (x *DenseNodes) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *DenseNodes) GetDenseInfo() *DenseInfo {
	if x != nil {
		return x.DenseInfo
	}
	return nil
}

func (x *DenseNodes) GetLats() []int64 {
	if x != nil {
		return x.Lats
	}
	return nil
}

func (x *DenseNodes) GetLons() []int64 {
	if x != nil {
		return x.Lons
	}
	return nil
}

func (x *DenseNodes) GetKeysVals() []uint32 {
	if x != nil {
		return x.KeysVals
	}
	return nil
}

func (x *DenseNodes) GetStrings() []string {
	if x != nil {
		return x.Strings
	}
	return nil
}

type DenseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Versions   []int32 `protobuf:"varint,1,rep,packed,name=versions" json:"versions,omitempty"`
	Timestamps []int64 `protobuf:"zigzag64,2,rep,packed,name=timestamps" json:"timestamps,omitempty"` // DELTA coded
	// these will be omitted if the object represents one changeset
	// and these will be all the same.
	ChangesetIds []int64 `protobuf:"zigzag64,3,rep,packed,name=changeset_ids,json=changesetIds" json:"changeset_ids,omitempty"` // DELTA coded
	UserIds      []int32 `protobuf:"zigzag32,4,rep,packed,name=user_ids,json=userIds" json:"user_ids,omitempty"`                // DELTA coded
	UserSids     []int32 `protobuf:"zigzag32,5,rep,packed,name=user_sids,json=userSids" json:"user_sids,omitempty"`             // String IDs for usernames. DELTA coded
	// The visible flag is used to store history information. It indicates that
	// the current object version has been created by a delete operation on the
	// OSM API. This info may be omitted if it can be inferred from its group
	// ie. create, modify, delete.
	Visibles []bool `protobuf:"varint,6,rep,packed,name=visibles" json:"visibles,omitempty"`
	// the time this element was committed into the db. Could be much later than
	// timestamp for large uploads.
	Committeds []int64 `protobuf:"zigzag64,7,rep,packed,name=committeds" json:"committeds,omitempty"` // DELTA coded
}

func (x *DenseInfo) Reset() {
	*x = DenseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_osm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DenseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DenseInfo) ProtoMessage() {}

func (x *DenseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_osm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DenseInfo.ProtoReflect.Descriptor instead.
func (*DenseInfo) Descriptor() ([]byte, []int) {
	return file_osm_proto_rawDescGZIP(), []int{8}
}

func (x *DenseInfo) GetVersions() []int32 {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *DenseInfo) GetTimestamps() []int64 {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *DenseInfo) GetChangesetIds() []int64 {
	if x != nil {
		return x.ChangesetIds
	}
	return nil
}

func (x *DenseInfo) GetUserIds() []int32 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *DenseInfo) GetUserSids() []int32 {
	if x != nil {
		return x.UserSids
	}
	return nil
}

func (x *DenseInfo) GetVisibles() []bool {
	if x != nil {
		return x.Visibles
	}
	return nil
}

func (x *DenseInfo) GetCommitteds() []int64 {
	if x != nil {
		return x.Committeds
	}
	return nil
}

type Way struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *int64 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// Parallel arrays.
	Keys []uint32 `protobuf:"varint,2,rep,packed,name=keys" json:"keys,omitempty"`
	Vals []uint32 `protobuf:"varint,3,rep,packed,name=vals" json:"vals,omitempty"`
	Info *Info    `protobuf:"bytes,4,opt,name=info" json:"info,omitempty"`
	// Only one of the next two must be included.
	// refs are DELTA coded node ids. If there is more info,
	// versions, changeset ids, lat and lon will be encoded
	// as a DenseMembers object.
	Refs         []int64       `protobuf:"zigzag64,8,rep,packed,name=refs" json:"refs,omitempty"`
	DenseMembers *DenseMembers `protobuf:"bytes,9,opt,name=dense_members,json=denseMembers" json:"dense_members,omitempty"`
	// updates are changes to members that did not happen
	// at a similar time to a change in the parent.
	Updates *DenseMembers `protobuf:"bytes,10,opt,name=updates" json:"updates,omitempty"`
}

func (x *Way) Reset() {
	*x = Way{}
	if protoimpl.UnsafeEnabled {
		mi := &file_osm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Way) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Way) ProtoMessage() {}

func (x *Way) ProtoReflect() protoreflect.Message {
	mi := &file_osm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Way.ProtoReflect.Descriptor instead.
func (*Way) Descriptor() ([]byte, []int) {
	return file_osm_proto_rawDescGZIP(), []int{9}
}

func (x *Way) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Way) GetKeys() []uint32 {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *Way) GetVals() []uint32 {
	if x != nil {
		return x.Vals
	}
	return nil
}

func (x *Way) GetInfo() *Info {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Way) GetRefs() []int64 {
	if x != nil {
		return x.Refs
	}
	return nil
}

func (x *Way) GetDenseMembers() *DenseMembers {
	if x != nil {
		return x.DenseMembers
	}
	return nil
}

func (x *Way) GetUpdates() *DenseMembers {
	if x != nil {
		return x.Updates
	}
	return nil
}

type Relation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *int64 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// Parallel arrays.
	Keys []uint32 `protobuf:"varint,2,rep,packed,name=keys" json:"keys,omitempty"`
	Vals []uint32 `protobuf:"varint,3,rep,packed,name=vals" json:"vals,omitempty"`
	Info *Info    `protobuf:"bytes,4,opt,name=info" json:"info,omitempty"`
	// Parallel arrays
	// Roles has been changed int32 -> uint32 form the osm proto,
	// this is for consistency and backwards compatible.
	Roles []uint32              `protobuf:"varint,8,rep,packed,name=roles" json:"roles,omitempty"` // String IDs.
	Refs  []int64               `protobuf:"zigzag64,9,rep,packed,name=refs" json:"refs,omitempty"` // DELTA encoded
	Types []Relation_MemberType `protobuf:"varint,10,rep,packed,name=types,enum=osm.Relation_MemberType" json:"types,omitempty"`
	// DenseMembers includes annotated information about the members
	DenseMembers *DenseMembers `protobuf:"bytes,11,opt,name=dense_members,json=denseMembers" json:"dense_members,omitempty"`
	// updates are changes to members that did not happen
	// at a similar time to a change in the parent.
	Updates *DenseMembers `protobuf:"bytes,12,opt,name=updates" json:"updates,omitempty"`
}

func (x *Relation) Reset() {
	*x = Relation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_osm_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Relation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relation) ProtoMessage() {}

func (x *Relation) ProtoReflect() protoreflect.Message {
	mi := &file_osm_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relation.ProtoReflect.Descriptor instead.
func (*Relation) Descriptor() ([]byte, []int) {
	return file_osm_proto_rawDescGZIP(), []int{10}
}

func (x *Relation) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Relation) GetKeys() []uint32 {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *Relation) GetVals() []uint32 {
	if x != nil {
		return x.Vals
	}
	return nil
}

func (x *Relation) GetInfo() *Info {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Relation) GetRoles() []uint32 {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *Relation) GetRefs() []int64 {
	if x != nil {
		return x.Refs
	}
	return nil
}

func (x *Relation) GetTypes() []Relation_MemberType {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *Relation) GetDenseMembers() *DenseMembers {
	if x != nil {
		return x.DenseMembers
	}
	return nil
}

func (x *Relation) GetUpdates() *DenseMembers {
	if x != nil {
		return x.Updates
	}
	return nil
}

type DenseMembers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Indexes      []int32 `protobuf:"zigzag32,1,rep,packed,name=indexes" json:"indexes,omitempty"` // DELTA coded
	Versions     []int32 `protobuf:"varint,2,rep,packed,name=versions" json:"versions,omitempty"`
	Timestamps   []int64 `protobuf:"zigzag64,3,rep,packed,name=timestamps" json:"timestamps,omitempty"`                         // DELTA coded
	ChangesetIds []int64 `protobuf:"zigzag64,4,rep,packed,name=changeset_ids,json=changesetIds" json:"changeset_ids,omitempty"` // DELTA coded
	Orientation  []int32 `protobuf:"zigzag32,5,rep,packed,name=orientation" json:"orientation,omitempty"`
	// included if some of the members are nodes
	Lats []int64 `protobuf:"zigzag64,8,rep,packed,name=lats" json:"lats,omitempty"` // DELTA coded
	Lons []int64 `protobuf:"zigzag64,9,rep,packed,name=lons" json:"lons,omitempty"` // DELTA coded
}

func (x *DenseMembers) Reset() {
	*x = DenseMembers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_osm_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DenseMembers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DenseMembers) ProtoMessage() {}

func (x *DenseMembers) ProtoReflect() protoreflect.Message {
	mi := &file_osm_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DenseMembers.ProtoReflect.Descriptor instead.
func (*DenseMembers) Descriptor() ([]byte, []int) {
	return file_osm_proto_rawDescGZIP(), []int{11}
}

func (x *DenseMembers) GetIndexes() []int32 {
	if x != nil {
		return x.Indexes
	}
	return nil
}

func (x *DenseMembers) GetVersions() []int32 {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *DenseMembers) GetTimestamps() []int64 {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *DenseMembers) GetChangesetIds() []int64 {
	if x != nil {
		return x.ChangesetIds
	}
	return nil
}

func (x *DenseMembers) GetOrientation() []int32 {
	if x != nil {
		return x.Orientation
	}
	return nil
}

func (x *DenseMembers) GetLats() []int64 {
	if x != nil {
		return x.Lats
	}
	return nil
}

func (x *DenseMembers) GetLons() []int64 {
	if x != nil {
		return x.Lons
	}
	return nil
}

var File_osm_proto protoreflect.FileDescriptor

var file_osm_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6f, 0x73, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x6f, 0x73, 0x6d,
	0x22, 0xb3, 0x02, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01,
	0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x04, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x04, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x53,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6f, 0x70,
	0x65, 0x6e, 0x12, 0x23, 0x0a, 0x06, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52,
	0x06, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x6c, 0x0a, 0x06, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x12, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78,
	0x5f, 0x6c, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x12, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x4c,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x12, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x4c, 0x61, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6d,
	0x61, 0x78, 0x5f, 0x6c, 0x61, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x12, 0x52, 0x06, 0x6d, 0x61,
	0x78, 0x4c, 0x61, 0x74, 0x22, 0xac, 0x01, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x20, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x4f, 0x53, 0x4d, 0x52, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x20, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x4f, 0x53, 0x4d, 0x52, 0x06, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x12, 0x20, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x4f, 0x53, 0x4d, 0x52, 0x06, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x4f, 0x53, 0x4d,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x73, 0x22, 0x23, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6b,
	0x65, 0x79, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x6b, 0x65, 0x79, 0x73, 0x56, 0x61, 0x6c, 0x73, 0x22, 0xe2, 0x01, 0x0a, 0x03, 0x4f, 0x53, 0x4d,
	0x12, 0x23, 0x0a, 0x06, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x06, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x0b, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x73,
	0x6d, 0x2e, 0x44, 0x65, 0x6e, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x0a, 0x64, 0x65,
	0x6e, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x04, 0x77, 0x61, 0x79, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x57, 0x61, 0x79,
	0x52, 0x04, 0x77, 0x61, 0x79, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x73, 0x6d, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x89, 0x01,
	0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x16,
	0x0a, 0x04, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01,
	0x52, 0x04, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x08, 0x20, 0x02,
	0x28, 0x12, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x02, 0x28, 0x12, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x22, 0xcd, 0x01, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x53, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x22, 0xbc, 0x01, 0x0a, 0x0a, 0x44, 0x65,
	0x6e, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x12, 0x42, 0x02, 0x10, 0x01, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x2d,
	0x0a, 0x0a, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x44, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a,
	0x04, 0x6c, 0x61, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x12, 0x42, 0x02, 0x10, 0x01, 0x52,
	0x04, 0x6c, 0x61, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x04, 0x6c, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x12, 0x42, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6c, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a,
	0x09, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d,
	0x42, 0x02, 0x10, 0x01, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x56, 0x61, 0x6c, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xfc, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x6e,
	0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x01, 0x52, 0x08, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x12, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x27, 0x0a, 0x0d, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x12, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x11, 0x42, 0x02, 0x10, 0x01, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x12, 0x1f, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x11, 0x42, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x53,
	0x69, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x08, 0x42, 0x02, 0x10, 0x01, 0x52, 0x08, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x12, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x03, 0x57, 0x61, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10,
	0x01, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x04, 0x76, 0x61, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x04, 0x76, 0x61, 0x6c, 0x73, 0x12,
	0x1d, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x6f, 0x73, 0x6d, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x0a, 0x04, 0x72, 0x65, 0x66, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x12, 0x42, 0x02, 0x10, 0x01,
	0x52, 0x04, 0x72, 0x65, 0x66, 0x73, 0x12, 0x36, 0x0a, 0x0d, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x5f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x6f, 0x73, 0x6d, 0x2e, 0x44, 0x65, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x52, 0x0c, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x2b,
	0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x44, 0x65, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0xe3, 0x02, 0x0a, 0x08,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x12, 0x16, 0x0a, 0x04, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02,
	0x10, 0x01, 0x52, 0x04, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x12, 0x16, 0x0a, 0x04, 0x72, 0x65, 0x66, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x12, 0x42,
	0x02, 0x10, 0x01, 0x52, 0x04, 0x72, 0x65, 0x66, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x02, 0x10, 0x01, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x36, 0x0a,
	0x0d, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x44, 0x65, 0x6e, 0x73, 0x65,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x0c, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x73, 0x6d, 0x2e, 0x44, 0x65, 0x6e,
	0x73, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x22, 0x2d, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x41,
	0x59, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x02, 0x22, 0xef, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x11, 0x42, 0x02, 0x10, 0x01, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73,
	0x12, 0x1e, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x05, 0x42, 0x02, 0x10, 0x01, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x22, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x12, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x73, 0x12, 0x27, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x12, 0x42, 0x02, 0x10, 0x01, 0x52,
	0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a,
	0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x11, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x04, 0x6c, 0x61, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x12, 0x42, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6c, 0x61, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x04, 0x6c,
	0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x12, 0x42, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6c,
	0x6f, 0x6e, 0x73, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x70, 0x61, 0x75, 0x6c, 0x6d, 0x61, 0x63, 0x68, 0x2f, 0x6f, 0x73, 0x6d, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x6f, 0x73, 0x6d, 0x70, 0x62,
}

var (
	file_osm_proto_rawDescOnce sync.Once
	file_osm_proto_rawDescData = file_osm_proto_rawDesc
)

func file_osm_proto_rawDescGZIP() []byte {
	file_osm_proto_rawDescOnce.Do(func() {
		file_osm_proto_rawDescData = protoimpl.X.CompressGZIP(file_osm_proto_rawDescData)
	})
	return file_osm_proto_rawDescData
}

var file_osm_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_osm_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_osm_proto_goTypes = []interface{}{
	(Relation_MemberType)(0), // 0: osm.Relation.MemberType
	(*Changeset)(nil),        // 1: osm.Changeset
	(*Bounds)(nil),           // 2: osm.Bounds
	(*Change)(nil),           // 3: osm.Change
	(*Tags)(nil),             // 4: osm.Tags
	(*OSM)(nil),              // 5: osm.OSM
	(*Node)(nil),             // 6: osm.Node
	(*Info)(nil),             // 7: osm.Info
	(*DenseNodes)(nil),       // 8: osm.DenseNodes
	(*DenseInfo)(nil),        // 9: osm.DenseInfo
	(*Way)(nil),              // 10: osm.Way
	(*Relation)(nil),         // 11: osm.Relation
	(*DenseMembers)(nil),     // 12: osm.DenseMembers
}
var file_osm_proto_depIdxs = []int32{
	2,  // 0: osm.Changeset.bounds:type_name -> osm.Bounds
	3,  // 1: osm.Changeset.change:type_name -> osm.Change
	5,  // 2: osm.Change.create:type_name -> osm.OSM
	5,  // 3: osm.Change.modify:type_name -> osm.OSM
	5,  // 4: osm.Change.delete:type_name -> osm.OSM
	5,  // 5: osm.Change.context:type_name -> osm.OSM
	2,  // 6: osm.OSM.bounds:type_name -> osm.Bounds
	6,  // 7: osm.OSM.nodes:type_name -> osm.Node
	8,  // 8: osm.OSM.dense_nodes:type_name -> osm.DenseNodes
	10, // 9: osm.OSM.ways:type_name -> osm.Way
	11, // 10: osm.OSM.relations:type_name -> osm.Relation
	7,  // 11: osm.Node.info:type_name -> osm.Info
	9,  // 12: osm.DenseNodes.dense_info:type_name -> osm.DenseInfo
	7,  // 13: osm.Way.info:type_name -> osm.Info
	12, // 14: osm.Way.dense_members:type_name -> osm.DenseMembers
	12, // 15: osm.Way.updates:type_name -> osm.DenseMembers
	7,  // 16: osm.Relation.info:type_name -> osm.Info
	0,  // 17: osm.Relation.types:type_name -> osm.Relation.MemberType
	12, // 18: osm.Relation.dense_members:type_name -> osm.DenseMembers
	12, // 19: osm.Relation.updates:type_name -> osm.DenseMembers
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_osm_proto_init() }
func file_osm_proto_init() {
	if File_osm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_osm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Changeset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_osm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bounds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_osm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Change); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_osm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_osm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OSM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_osm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_osm_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_osm_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DenseNodes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_osm_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DenseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_osm_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Way); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_osm_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Relation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_osm_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DenseMembers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_osm_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_osm_proto_goTypes,
		DependencyIndexes: file_osm_proto_depIdxs,
		EnumInfos:         file_osm_proto_enumTypes,
		MessageInfos:      file_osm_proto_msgTypes,
	}.Build()
	File_osm_proto = out.File
	file_osm_proto_rawDesc = nil
	file_osm_proto_goTypes = nil
	file_osm_proto_depIdxs = nil
}
