syntax = "proto2";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

package osm;

option go_package = "osmpb";

option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;

message Changeset {
  optional int64 id = 1 [(gogoproto.nullable) = true];

  // Parallel arrays.
  repeated uint32 keys = 2 [packed = true];
  repeated uint32 vals = 3 [packed = true];


  optional int32 user_id = 5 [(gogoproto.nullable) = true];
  optional uint32 user_sid = 6 [(gogoproto.nullable) = true];
  optional int64 created_at = 7 [(gogoproto.nullable) = true]; // epoch time
  optional int64 closed_at = 8 [(gogoproto.nullable) = true]; // epoch time
  optional bool open = 9 [(gogoproto.nullable) = true];

  optional Bounds bounds = 10;
  optional Change change = 11;

  // contains the tag strings for everything
  // in this entire changeset.
  repeated string strings = 20;
}

message Bounds {
	required sint64 min_lon = 1;
	required sint64 max_lon = 2;
	required sint64 min_lat = 3;
	required sint64 max_lat = 4;
}

message Change {
  optional OSM create = 1;
  optional OSM modify = 2;
  optional OSM delete = 3;

  // elements that give the change extra context like
  // nodes of the ways, and previous versions.
  optional OSM context = 4;

  // contains the tag strings if this is the root of the data.
  repeated string strings = 20;
}

message Tags {
  // encoded as [key1, val1, key2, val2, etc.]
  repeated string keys_vals = 1;
}

message OSM {
  optional Bounds bounds = 1;

  // an encoded should have either nodes or a dense_nodes, but not both.
  repeated Node       nodes = 2;
  optional DenseNodes dense_nodes = 3;
  repeated Way        ways = 4;
  repeated Relation   relations = 5;

  // contains the tag strings if this is the root of the data.
  repeated string strings = 15;
}

// The message defined below are trying to match the official osm pdf
// see http://wiki.openstreetmap.org/wiki/PBF_Format
// and https://github.com/scrosby/OSM-binary/blob/master/src/osmformat.proto

message Node {
  required int64 id = 1;

  // Parallel arrays.
  repeated uint32 keys = 2 [packed = true]; // String IDs.
  repeated uint32 vals = 3 [packed = true]; // String IDs.

  optional Info info = 4;

  required sint64 lat = 8;
  required sint64 lon = 9;
}

message Info {
  optional int32 version = 1;
  optional int64 timestamp = 2; // Epoch

  // these can be omitted if the object represents one changeset
  // since they will be all the same. However tests on 200k changesets
  // show this saves about 17 bytes per changeset on average after gzip.
  optional int64 changeset_id = 3;
  optional int32 user_id = 4;
  optional uint32 user_sid = 5; // String ID

  // The visible flag is used to store history information. It indicates that
  // the current object version has been created by a delete operation on the
  // OSM API. This info may be omitted if it can be inferred from its group
  // ie. create, modify, delete.
  optional bool visible = 6 [(gogoproto.nullable) = true];

  // the time this element was committed into the db. Could be much later than
  // timestamp for large uploads.
  optional int64 committed = 7 [(gogoproto.nullable) = true]; // Epoch
}

message DenseNodes {
  repeated sint64 ids = 1 [packed = true]; // DELTA coded

  optional DenseInfo dense_info = 5;

  repeated sint64 lats = 8 [packed = true]; // DELTA coded
  repeated sint64 lons = 9 [packed = true]; // DELTA coded

  // Special packing of keys and vals into one array. We use a single stringid
  // of 0 to delimit when the tags of a node ends and the tags of the next node
  // begin. The storage pattern is: ((<keyid> <valid>)* '0' )* As an exception,
  // if no node in the current block has any key/value pairs, this array does
  // not contain any delimiters, but is simply empty.
  repeated uint32 keys_vals = 10 [packed = true];

  repeated string strings = 15; // NOTE: id less than 16 encodes as 2 less bytes.
}

message DenseInfo {
  repeated int32 versions = 1 [packed = true];
  repeated sint64 timestamps = 2 [packed = true]; // DELTA coded

  // these will be omitted if the object represents one changeset
  // and these will be all the same.
  repeated sint64 changeset_ids = 3 [packed = true]; // DELTA coded
  repeated sint32 user_ids = 4 [packed = true]; // DELTA coded
  repeated sint32 user_sids = 5 [packed = true]; // String IDs for usernames. DELTA coded

  // The visible flag is used to store history information. It indicates that
  // the current object version has been created by a delete operation on the
  // OSM API. This info may be omitted if it can be inferred from its group
  // ie. create, modify, delete.
  repeated bool visibles = 6 [packed = true];

  // the time this element was committed into the db. Could be much later than
  // timestamp for large uploads.
  repeated sint64 committeds = 7 [packed = true]; // DELTA coded
}

message Way {
  required int64 id = 1;

  // Parallel arrays.
  repeated uint32 keys = 2 [packed = true];
  repeated uint32 vals = 3 [packed = true];

  optional Info info = 4;

  // Only one of the next two must be included.
  // refs are DELTA coded node ids. If there is more info,
  // versions, changeset ids, lat and lon will be encoded
  // as a DenseMembers object.
  repeated sint64 refs = 8 [packed = true];
  optional DenseMembers dense_members = 9;

  // updates are changes to members that did not happen
  // at a similar time to a change in the parent.
  optional DenseMembers updates = 10;
}

message Relation {
  enum MemberType {
    NODE = 0;
    WAY = 1;
    RELATION = 2;
  }

  required int64 id = 1;

  // Parallel arrays.
  repeated uint32 keys = 2 [packed = true];
  repeated uint32 vals = 3 [packed = true];

  optional Info info = 4;

  // Parallel arrays
  // Roles has been changed int32 -> uint32 form the osm proto,
  // this is for consistency and backwards compatible.
  repeated uint32 roles = 8 [packed = true]; // String IDs.
  repeated sint64 refs = 9 [packed = true]; // DELTA encoded
  repeated MemberType types = 10 [packed = true];

  // DenseMembers includes annotated information about the members
  optional DenseMembers dense_members = 11;

  // updates are changes to members that did not happen
  // at a similar time to a change in the parent.
  optional DenseMembers updates = 12;
}

message DenseMembers {
  repeated sint32 indexes = 1 [packed = true]; // DELTA coded
  repeated int32 versions = 2 [packed = true];
  repeated sint64 timestamps = 3 [packed = true]; // DELTA coded
  repeated sint64 changeset_ids = 4 [packed = true]; // DELTA coded
  repeated sint32 orientation = 5 [packed=true];

  // included if some of the members are nodes
  repeated sint64 lats = 8 [packed = true]; // DELTA coded
  repeated sint64 lons = 9 [packed = true]; // DELTA coded
}
