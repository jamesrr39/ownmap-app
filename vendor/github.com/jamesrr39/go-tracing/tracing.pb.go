// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tracing.proto

package tracing

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Trace struct {
	Name           string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Summary        string  `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
	StartTimeNanos int64   `protobuf:"varint,3,opt,name=start_time_nanos,json=startTimeNanos,proto3" json:"startTimeNanos"`
	EndTimeNanos   int64   `protobuf:"varint,4,opt,name=end_time_nanos,json=endTimeNanos,proto3" json:"endTimeNanos"`
	Spans          []*Span `protobuf:"bytes,5,rep,name=spans,proto3" json:"spans,omitempty"`
}

func (m *Trace) Reset()      { *m = Trace{} }
func (*Trace) ProtoMessage() {}
func (*Trace) Descriptor() ([]byte, []int) {
	return fileDescriptor_1328e5b5ac283080, []int{0}
}
func (m *Trace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Trace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Trace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Trace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trace.Merge(m, src)
}
func (m *Trace) XXX_Size() int {
	return m.Size()
}
func (m *Trace) XXX_DiscardUnknown() {
	xxx_messageInfo_Trace.DiscardUnknown(m)
}

var xxx_messageInfo_Trace proto.InternalMessageInfo

func (m *Trace) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Trace) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *Trace) GetStartTimeNanos() int64 {
	if m != nil {
		return m.StartTimeNanos
	}
	return 0
}

func (m *Trace) GetEndTimeNanos() int64 {
	if m != nil {
		return m.EndTimeNanos
	}
	return 0
}

func (m *Trace) GetSpans() []*Span {
	if m != nil {
		return m.Spans
	}
	return nil
}

type Span struct {
	Name           string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	StartTimeNanos int64  `protobuf:"varint,2,opt,name=start_time_nanos,json=startTimeNanos,proto3" json:"startTimeNanos"`
	EndTimeNanos   int64  `protobuf:"varint,3,opt,name=end_time_nanos,json=endTimeNanos,proto3" json:"endTimeNanos"`
}

func (m *Span) Reset()      { *m = Span{} }
func (*Span) ProtoMessage() {}
func (*Span) Descriptor() ([]byte, []int) {
	return fileDescriptor_1328e5b5ac283080, []int{1}
}
func (m *Span) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Span) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Span.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Span) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Span.Merge(m, src)
}
func (m *Span) XXX_Size() int {
	return m.Size()
}
func (m *Span) XXX_DiscardUnknown() {
	xxx_messageInfo_Span.DiscardUnknown(m)
}

var xxx_messageInfo_Span proto.InternalMessageInfo

func (m *Span) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Span) GetStartTimeNanos() int64 {
	if m != nil {
		return m.StartTimeNanos
	}
	return 0
}

func (m *Span) GetEndTimeNanos() int64 {
	if m != nil {
		return m.EndTimeNanos
	}
	return 0
}

func init() {
	proto.RegisterType((*Trace)(nil), "github.com.jamesrr39.tracing.Trace")
	proto.RegisterType((*Span)(nil), "github.com.jamesrr39.tracing.Span")
}

func init() { proto.RegisterFile("tracing.proto", fileDescriptor_1328e5b5ac283080) }

var fileDescriptor_1328e5b5ac283080 = []byte{
	// 333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x29, 0x4a, 0x4c,
	0xce, 0xcc, 0x4b, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0x49, 0xcf, 0x2c, 0xc9, 0x28,
	0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xcb, 0x4a, 0xcc, 0x4d, 0x2d, 0x2e, 0x2a, 0x32, 0xb6, 0xd4,
	0x83, 0xaa, 0x91, 0x32, 0x29, 0x4b, 0xcd, 0x4b, 0xc9, 0x2f, 0xd2, 0x47, 0x28, 0xd2, 0x4f, 0xcf,
	0x4f, 0xcf, 0xd7, 0x07, 0xeb, 0x4d, 0x2a, 0x4d, 0x03, 0xf3, 0xc0, 0x1c, 0x30, 0x0b, 0x62, 0xa6,
	0x52, 0x3b, 0x13, 0x17, 0x6b, 0x48, 0x51, 0x62, 0x72, 0xaa, 0x90, 0x10, 0x17, 0x4b, 0x5e, 0x62,
	0x6e, 0xaa, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x98, 0x2d, 0x24, 0xc1, 0xc5, 0x5e, 0x5c,
	0x9a, 0x9b, 0x9b, 0x58, 0x54, 0x29, 0xc1, 0x04, 0x16, 0x86, 0x71, 0x85, 0xfc, 0xb8, 0x04, 0x8a,
	0x4b, 0x12, 0x8b, 0x4a, 0xe2, 0x4b, 0x32, 0x73, 0x53, 0xe3, 0xf3, 0x12, 0xf3, 0xf2, 0x8b, 0x25,
	0x98, 0x15, 0x18, 0x35, 0x98, 0x9d, 0x54, 0x1e, 0xdd, 0x93, 0xe7, 0x0b, 0x06, 0xc9, 0x85, 0x64,
	0xe6, 0xa6, 0xfa, 0x81, 0x64, 0x5e, 0xdd, 0x93, 0xe7, 0x2b, 0x46, 0x11, 0x09, 0x42, 0xe3, 0x0b,
	0xb9, 0x71, 0xf1, 0xa5, 0xe6, 0xa5, 0x20, 0x9b, 0xc6, 0x02, 0x36, 0x4d, 0xe1, 0xd1, 0x3d, 0x79,
	0x1e, 0xd7, 0xbc, 0x14, 0x64, 0xb3, 0x78, 0x52, 0x91, 0xf8, 0x41, 0x28, 0x3c, 0x21, 0x0b, 0x2e,
	0xd6, 0xe2, 0x82, 0xc4, 0xbc, 0x62, 0x09, 0x56, 0x05, 0x66, 0x0d, 0x6e, 0x23, 0x25, 0x3d, 0x7c,
	0x61, 0xa6, 0x17, 0x5c, 0x90, 0x98, 0x17, 0x04, 0xd1, 0xa0, 0xb4, 0x89, 0x91, 0x8b, 0x05, 0xc4,
	0xc7, 0x1a, 0x10, 0xd8, 0xbc, 0xcb, 0x44, 0x55, 0xef, 0x32, 0x93, 0xe3, 0x5d, 0x27, 0xdb, 0x0b,
	0x0f, 0xe5, 0x18, 0x6e, 0x3c, 0x94, 0x63, 0xf8, 0xf0, 0x50, 0x8e, 0xb1, 0xe1, 0x91, 0x1c, 0xe3,
	0x8a, 0x47, 0x72, 0x8c, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c,
	0xe3, 0x8b, 0x47, 0x72, 0x0c, 0x1f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1,
	0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0xec, 0x50, 0xff, 0x27, 0xb1, 0x81, 0x13, 0x81, 0x31,
	0x20, 0x00, 0x00, 0xff, 0xff, 0x3a, 0x5c, 0xde, 0xd8, 0x69, 0x02, 0x00, 0x00,
}

func (this *Trace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Trace)
	if !ok {
		that2, ok := that.(Trace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Summary != that1.Summary {
		return false
	}
	if this.StartTimeNanos != that1.StartTimeNanos {
		return false
	}
	if this.EndTimeNanos != that1.EndTimeNanos {
		return false
	}
	if len(this.Spans) != len(that1.Spans) {
		return false
	}
	for i := range this.Spans {
		if !this.Spans[i].Equal(that1.Spans[i]) {
			return false
		}
	}
	return true
}
func (this *Span) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Span)
	if !ok {
		that2, ok := that.(Span)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.StartTimeNanos != that1.StartTimeNanos {
		return false
	}
	if this.EndTimeNanos != that1.EndTimeNanos {
		return false
	}
	return true
}
func (this *Trace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&tracing.Trace{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Summary: "+fmt.Sprintf("%#v", this.Summary)+",\n")
	s = append(s, "StartTimeNanos: "+fmt.Sprintf("%#v", this.StartTimeNanos)+",\n")
	s = append(s, "EndTimeNanos: "+fmt.Sprintf("%#v", this.EndTimeNanos)+",\n")
	if this.Spans != nil {
		s = append(s, "Spans: "+fmt.Sprintf("%#v", this.Spans)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Span) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tracing.Span{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "StartTimeNanos: "+fmt.Sprintf("%#v", this.StartTimeNanos)+",\n")
	s = append(s, "EndTimeNanos: "+fmt.Sprintf("%#v", this.EndTimeNanos)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTracing(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Trace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Trace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Trace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Spans) > 0 {
		for iNdEx := len(m.Spans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Spans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTracing(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.EndTimeNanos != 0 {
		i = encodeVarintTracing(dAtA, i, uint64(m.EndTimeNanos))
		i--
		dAtA[i] = 0x20
	}
	if m.StartTimeNanos != 0 {
		i = encodeVarintTracing(dAtA, i, uint64(m.StartTimeNanos))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Summary) > 0 {
		i -= len(m.Summary)
		copy(dAtA[i:], m.Summary)
		i = encodeVarintTracing(dAtA, i, uint64(len(m.Summary)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTracing(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Span) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Span) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Span) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndTimeNanos != 0 {
		i = encodeVarintTracing(dAtA, i, uint64(m.EndTimeNanos))
		i--
		dAtA[i] = 0x18
	}
	if m.StartTimeNanos != 0 {
		i = encodeVarintTracing(dAtA, i, uint64(m.StartTimeNanos))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTracing(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTracing(dAtA []byte, offset int, v uint64) int {
	offset -= sovTracing(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Trace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTracing(uint64(l))
	}
	l = len(m.Summary)
	if l > 0 {
		n += 1 + l + sovTracing(uint64(l))
	}
	if m.StartTimeNanos != 0 {
		n += 1 + sovTracing(uint64(m.StartTimeNanos))
	}
	if m.EndTimeNanos != 0 {
		n += 1 + sovTracing(uint64(m.EndTimeNanos))
	}
	if len(m.Spans) > 0 {
		for _, e := range m.Spans {
			l = e.Size()
			n += 1 + l + sovTracing(uint64(l))
		}
	}
	return n
}

func (m *Span) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTracing(uint64(l))
	}
	if m.StartTimeNanos != 0 {
		n += 1 + sovTracing(uint64(m.StartTimeNanos))
	}
	if m.EndTimeNanos != 0 {
		n += 1 + sovTracing(uint64(m.EndTimeNanos))
	}
	return n
}

func sovTracing(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTracing(x uint64) (n int) {
	return sovTracing(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Trace) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSpans := "[]*Span{"
	for _, f := range this.Spans {
		repeatedStringForSpans += strings.Replace(f.String(), "Span", "Span", 1) + ","
	}
	repeatedStringForSpans += "}"
	s := strings.Join([]string{`&Trace{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Summary:` + fmt.Sprintf("%v", this.Summary) + `,`,
		`StartTimeNanos:` + fmt.Sprintf("%v", this.StartTimeNanos) + `,`,
		`EndTimeNanos:` + fmt.Sprintf("%v", this.EndTimeNanos) + `,`,
		`Spans:` + repeatedStringForSpans + `,`,
		`}`,
	}, "")
	return s
}
func (this *Span) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Span{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`StartTimeNanos:` + fmt.Sprintf("%v", this.StartTimeNanos) + `,`,
		`EndTimeNanos:` + fmt.Sprintf("%v", this.EndTimeNanos) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTracing(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Trace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTracing
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Trace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Trace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTracing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTracing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Summary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimeNanos", wireType)
			}
			m.StartTimeNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTimeNanos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimeNanos", wireType)
			}
			m.EndTimeNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTimeNanos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracing
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTracing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spans = append(m.Spans, &Span{})
			if err := m.Spans[len(m.Spans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTracing(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTracing
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Span) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTracing
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Span: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Span: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTracing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimeNanos", wireType)
			}
			m.StartTimeNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTimeNanos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimeNanos", wireType)
			}
			m.EndTimeNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTimeNanos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTracing(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTracing
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTracing(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTracing
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTracing
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTracing
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTracing
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTracing
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTracing
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTracing        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTracing          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTracing = fmt.Errorf("proto: unexpected end of group")
)
